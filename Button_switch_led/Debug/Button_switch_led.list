
Button_switch_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb0  08002eb0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb0  08002eb0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb0  08002eb0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000068  08002f20  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002f20  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091e6  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7a  00000000  00000000  00029277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd9  00000000  00000000  0002c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c88f  00000000  00000000  00042f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e95  00000000  00000000  0004f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d169d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002878  00000000  00000000  000d16f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e78 	.word	0x08002e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002e78 	.word	0x08002e78

0800014c <segment_led_run>:
 *      Author: HAU
 */
#include "global.h"
int led_index = 0;
int display_7segment[10] = {0x003F,0x0006, 0x005B, 0x004F, 0x0066, 0x006D, 0x00FD, 0x0007,0x00FF,0x00EF};
void segment_led_run(int led_index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d85a      	bhi.n	8000210 <segment_led_run+0xc4>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <segment_led_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800018d 	.word	0x0800018d
 8000164:	08000199 	.word	0x08000199
 8000168:	080001a5 	.word	0x080001a5
 800016c:	080001b1 	.word	0x080001b1
 8000170:	080001bd 	.word	0x080001bd
 8000174:	080001c9 	.word	0x080001c9
 8000178:	080001d5 	.word	0x080001d5
 800017c:	080001e1 	.word	0x080001e1
 8000180:	080001ed 	.word	0x080001ed
 8000184:	080001f9 	.word	0x080001f9
 8000188:	08000205 	.word	0x08000205
	switch(led_index){
	case 0:
		GPIOB->BSRR = ~display_7segment[0];
 800018c:	4b23      	ldr	r3, [pc, #140]	; (800021c <segment_led_run+0xd0>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	43da      	mvns	r2, r3
 8000192:	4b23      	ldr	r3, [pc, #140]	; (8000220 <segment_led_run+0xd4>)
 8000194:	611a      	str	r2, [r3, #16]
		//led_index = 1;
		//Set_timer2(100);
		break;
 8000196:	e03b      	b.n	8000210 <segment_led_run+0xc4>
	case 1:
		GPIOB->BSRR = ~display_7segment[1];
 8000198:	4b20      	ldr	r3, [pc, #128]	; (800021c <segment_led_run+0xd0>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	43da      	mvns	r2, r3
 800019e:	4b20      	ldr	r3, [pc, #128]	; (8000220 <segment_led_run+0xd4>)
 80001a0:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 2;
		//Set_timer2(100);
		//}
		break;
 80001a2:	e035      	b.n	8000210 <segment_led_run+0xc4>
	case 2:
		GPIOB->BSRR = ~display_7segment[2];
 80001a4:	4b1d      	ldr	r3, [pc, #116]	; (800021c <segment_led_run+0xd0>)
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	43da      	mvns	r2, r3
 80001aa:	4b1d      	ldr	r3, [pc, #116]	; (8000220 <segment_led_run+0xd4>)
 80001ac:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 3;
		//Set_timer2(100);
		//}
		break;
 80001ae:	e02f      	b.n	8000210 <segment_led_run+0xc4>
	case 3:
		GPIOB->BSRR = ~display_7segment[3];
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <segment_led_run+0xd0>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	43da      	mvns	r2, r3
 80001b6:	4b1a      	ldr	r3, [pc, #104]	; (8000220 <segment_led_run+0xd4>)
 80001b8:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 4;
		//Set_timer2(100);
		//}
		break;
 80001ba:	e029      	b.n	8000210 <segment_led_run+0xc4>
	case 4:
		GPIOB->BSRR = ~display_7segment[4];
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <segment_led_run+0xd0>)
 80001be:	691b      	ldr	r3, [r3, #16]
 80001c0:	43da      	mvns	r2, r3
 80001c2:	4b17      	ldr	r3, [pc, #92]	; (8000220 <segment_led_run+0xd4>)
 80001c4:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 5;
		//Set_timer2(100);
		//}
		break;
 80001c6:	e023      	b.n	8000210 <segment_led_run+0xc4>
	case 5:
		GPIOB->BSRR = ~display_7segment[5];
 80001c8:	4b14      	ldr	r3, [pc, #80]	; (800021c <segment_led_run+0xd0>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	43da      	mvns	r2, r3
 80001ce:	4b14      	ldr	r3, [pc, #80]	; (8000220 <segment_led_run+0xd4>)
 80001d0:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 6;
		//Set_timer2(100);
		//}
		break;
 80001d2:	e01d      	b.n	8000210 <segment_led_run+0xc4>
	case 6:
		GPIOB->BSRR = ~display_7segment[6];
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <segment_led_run+0xd0>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	43da      	mvns	r2, r3
 80001da:	4b11      	ldr	r3, [pc, #68]	; (8000220 <segment_led_run+0xd4>)
 80001dc:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 7;
		//Set_timer2(100);
		//}
		break;
 80001de:	e017      	b.n	8000210 <segment_led_run+0xc4>
	case 7:
		GPIOB->BSRR = ~display_7segment[7];
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <segment_led_run+0xd0>)
 80001e2:	69db      	ldr	r3, [r3, #28]
 80001e4:	43da      	mvns	r2, r3
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <segment_led_run+0xd4>)
 80001e8:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 8;
		//Set_timer2(100);
		//}
		break;
 80001ea:	e011      	b.n	8000210 <segment_led_run+0xc4>
	case 8:
		GPIOB->BSRR = ~display_7segment[8];
 80001ec:	4b0b      	ldr	r3, [pc, #44]	; (800021c <segment_led_run+0xd0>)
 80001ee:	6a1b      	ldr	r3, [r3, #32]
 80001f0:	43da      	mvns	r2, r3
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <segment_led_run+0xd4>)
 80001f4:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 9;
		//Set_timer2(100);
		//}
		break;
 80001f6:	e00b      	b.n	8000210 <segment_led_run+0xc4>
	case 9:
		GPIOB->BSRR = ~display_7segment[9];
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <segment_led_run+0xd0>)
 80001fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001fc:	43da      	mvns	r2, r3
 80001fe:	4b08      	ldr	r3, [pc, #32]	; (8000220 <segment_led_run+0xd4>)
 8000200:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 10;
		//Set_timer2(100);
		//}
		break;
 8000202:	e005      	b.n	8000210 <segment_led_run+0xc4>
	case 10:
		GPIOB->BSRR = ~display_7segment[0];
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <segment_led_run+0xd0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	43da      	mvns	r2, r3
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <segment_led_run+0xd4>)
 800020c:	611a      	str	r2, [r3, #16]
		//if(timer2_flag == 1){
		//led_index = 0;
		//Set_timer2(100);
		//}
		break;
 800020e:	bf00      	nop
	}
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000000 	.word	0x20000000
 8000220:	40010c00 	.word	0x40010c00

08000224 <blink_led_run>:
 *      Author: HAU
 */
#include "blink_led.h"
int led_state = 0;

void blink_led_run(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	switch(led_state){
 8000228:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <blink_led_run+0x7c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b02      	cmp	r3, #2
 800022e:	d022      	beq.n	8000276 <blink_led_run+0x52>
 8000230:	2b02      	cmp	r3, #2
 8000232:	dc33      	bgt.n	800029c <blink_led_run+0x78>
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <blink_led_run+0x1a>
 8000238:	2b01      	cmp	r3, #1
 800023a:	d00c      	beq.n	8000256 <blink_led_run+0x32>
		led_state = 1;
		Set_timer2(100);
		}
		break;
	}
}
 800023c:	e02e      	b.n	800029c <blink_led_run+0x78>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2120      	movs	r1, #32
 8000242:	4818      	ldr	r0, [pc, #96]	; (80002a4 <blink_led_run+0x80>)
 8000244:	f001 fe07 	bl	8001e56 <HAL_GPIO_WritePin>
		led_state = 1;
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <blink_led_run+0x7c>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]
		Set_timer2(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f001 fa0a 	bl	8001668 <Set_timer2>
		break;
 8000254:	e022      	b.n	800029c <blink_led_run+0x78>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2120      	movs	r1, #32
 800025a:	4812      	ldr	r0, [pc, #72]	; (80002a4 <blink_led_run+0x80>)
 800025c:	f001 fdfb 	bl	8001e56 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <blink_led_run+0x84>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d116      	bne.n	8000296 <blink_led_run+0x72>
		led_state = 2;
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <blink_led_run+0x7c>)
 800026a:	2202      	movs	r2, #2
 800026c:	601a      	str	r2, [r3, #0]
		Set_timer2(100);
 800026e:	2064      	movs	r0, #100	; 0x64
 8000270:	f001 f9fa 	bl	8001668 <Set_timer2>
		break;
 8000274:	e00f      	b.n	8000296 <blink_led_run+0x72>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2120      	movs	r1, #32
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <blink_led_run+0x80>)
 800027c:	f001 fdeb 	bl	8001e56 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <blink_led_run+0x84>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d108      	bne.n	800029a <blink_led_run+0x76>
		led_state = 1;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <blink_led_run+0x7c>)
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]
		Set_timer2(100);
 800028e:	2064      	movs	r0, #100	; 0x64
 8000290:	f001 f9ea 	bl	8001668 <Set_timer2>
		break;
 8000294:	e001      	b.n	800029a <blink_led_run+0x76>
		break;
 8000296:	bf00      	nop
 8000298:	e000      	b.n	800029c <blink_led_run+0x78>
		break;
 800029a:	bf00      	nop
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000084 	.word	0x20000084
 80002a4:	40010800 	.word	0x40010800
 80002a8:	200000ac 	.word	0x200000ac

080002ac <Is_button1_pressed>:
int button1_long_pressed_flag = 0;
int buttonINC_long_pressed_flag = 0;
int buttonDEC_long_pressed_flag = 0;


int Is_button1_pressed(){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <Is_button1_pressed+0x20>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d104      	bne.n	80002c2 <Is_button1_pressed+0x16>
		button1_flag = 0;
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <Is_button1_pressed+0x20>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
		return 1;
 80002be:	2301      	movs	r3, #1
 80002c0:	e000      	b.n	80002c4 <Is_button1_pressed+0x18>
	}
	else{
		return 0;
 80002c2:	2300      	movs	r3, #0
	}
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000088 	.word	0x20000088

080002d0 <Is_buttonINC_pressed>:
	}
	else{
		return 0;
	}
}
int Is_buttonINC_pressed(){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	if(buttonINC_flag == 1){
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <Is_buttonINC_pressed+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d104      	bne.n	80002e6 <Is_buttonINC_pressed+0x16>
		buttonINC_flag = 0;
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <Is_buttonINC_pressed+0x20>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
		return 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	e000      	b.n	80002e8 <Is_buttonINC_pressed+0x18>
	}
	else{
		return 0;
 80002e6:	2300      	movs	r3, #0
	}
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	2000008c 	.word	0x2000008c

080002f4 <Is_buttonINC_long_pressed>:
int Is_buttonINC_long_pressed(){
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	if(buttonINC_long_pressed_flag == 1){
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <Is_buttonINC_long_pressed+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d104      	bne.n	800030a <Is_buttonINC_long_pressed+0x16>
		buttonINC_long_pressed_flag = 0;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <Is_buttonINC_long_pressed+0x20>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
		return 1;
 8000306:	2301      	movs	r3, #1
 8000308:	e000      	b.n	800030c <Is_buttonINC_long_pressed+0x18>
	}
	else{
		return 0;
 800030a:	2300      	movs	r3, #0
	}
}
 800030c:	4618      	mov	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000098 	.word	0x20000098

08000318 <Is_buttonDEC_pressed>:
int Is_buttonDEC_pressed(){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	if(buttonDEC_flag == 1){
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <Is_buttonDEC_pressed+0x20>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d104      	bne.n	800032e <Is_buttonDEC_pressed+0x16>
		buttonDEC_flag = 0;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <Is_buttonDEC_pressed+0x20>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
		return 1;
 800032a:	2301      	movs	r3, #1
 800032c:	e000      	b.n	8000330 <Is_buttonDEC_pressed+0x18>
	}
	else{
		return 0;
 800032e:	2300      	movs	r3, #0
	}
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	20000090 	.word	0x20000090

0800033c <Is_buttonDEC_long_pressed>:
int Is_buttonDEC_long_pressed(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	if(buttonDEC_long_pressed_flag == 1){
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <Is_buttonDEC_long_pressed+0x20>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d104      	bne.n	8000352 <Is_buttonDEC_long_pressed+0x16>
		buttonDEC_long_pressed_flag = 0;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <Is_buttonDEC_long_pressed+0x20>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		return 1;
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <Is_buttonDEC_long_pressed+0x18>
	}
	else{
		return 0;
 8000352:	2300      	movs	r3, #0
	}
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	2000009c 	.word	0x2000009c

08000360 <Sub_key_pressed>:
void Sub_key_pressed(int index){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if(index == 0)	button1_flag = 1;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <Sub_key_pressed+0x14>
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <Sub_key_pressed+0x38>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
	if(index == 1)	buttonINC_flag = 1;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d102      	bne.n	8000380 <Sub_key_pressed+0x20>
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <Sub_key_pressed+0x3c>)
 800037c:	2201      	movs	r2, #1
 800037e:	601a      	str	r2, [r3, #0]
	if(index == 2)	buttonDEC_flag = 1;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b02      	cmp	r3, #2
 8000384:	d102      	bne.n	800038c <Sub_key_pressed+0x2c>
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <Sub_key_pressed+0x40>)
 8000388:	2201      	movs	r2, #1
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000088 	.word	0x20000088
 800039c:	2000008c 	.word	0x2000008c
 80003a0:	20000090 	.word	0x20000090

080003a4 <Sub_long_pressed>:
void Sub_long_pressed(int index){
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	if(index == 0)	button1_long_pressed_flag = 1;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d102      	bne.n	80003b8 <Sub_long_pressed+0x14>
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <Sub_long_pressed+0x38>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
	if(index == 1)	buttonINC_long_pressed_flag = 1;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d102      	bne.n	80003c4 <Sub_long_pressed+0x20>
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <Sub_long_pressed+0x3c>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
	if(index == 2)	buttonDEC_long_pressed_flag = 1;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d102      	bne.n	80003d0 <Sub_long_pressed+0x2c>
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <Sub_long_pressed+0x40>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000094 	.word	0x20000094
 80003e0:	20000098 	.word	0x20000098
 80003e4:	2000009c 	.word	0x2000009c

080003e8 <Button_undebounce>:
void Button_undebounce(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
	for(int i= 0; i<= 2;i++){
 80003ee:	2300      	movs	r3, #0
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	e076      	b.n	80004e2 <Button_undebounce+0xfa>
	State0[i] = State1[i];
 80003f4:	4a3f      	ldr	r2, [pc, #252]	; (80004f4 <Button_undebounce+0x10c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003fc:	493e      	ldr	r1, [pc, #248]	; (80004f8 <Button_undebounce+0x110>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	State1[i] = State2[i];
 8000404:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <Button_undebounce+0x114>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800040c:	4939      	ldr	r1, [pc, #228]	; (80004f4 <Button_undebounce+0x10c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	State2[0]  = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000418:	4839      	ldr	r0, [pc, #228]	; (8000500 <Button_undebounce+0x118>)
 800041a:	f001 fd05 	bl	8001e28 <HAL_GPIO_ReadPin>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	4b36      	ldr	r3, [pc, #216]	; (80004fc <Button_undebounce+0x114>)
 8000424:	601a      	str	r2, [r3, #0]
	State2[1]  = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800042a:	4835      	ldr	r0, [pc, #212]	; (8000500 <Button_undebounce+0x118>)
 800042c:	f001 fcfc 	bl	8001e28 <HAL_GPIO_ReadPin>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	4b31      	ldr	r3, [pc, #196]	; (80004fc <Button_undebounce+0x114>)
 8000436:	605a      	str	r2, [r3, #4]
	State2[2]  = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800043c:	4830      	ldr	r0, [pc, #192]	; (8000500 <Button_undebounce+0x118>)
 800043e:	f001 fcf3 	bl	8001e28 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	461a      	mov	r2, r3
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <Button_undebounce+0x114>)
 8000448:	609a      	str	r2, [r3, #8]

	if((State0[i] == State1[i]) && (State1[i] == State2[i])){
 800044a:	4a2b      	ldr	r2, [pc, #172]	; (80004f8 <Button_undebounce+0x110>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000452:	4928      	ldr	r1, [pc, #160]	; (80004f4 <Button_undebounce+0x10c>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800045a:	429a      	cmp	r2, r3
 800045c:	d13e      	bne.n	80004dc <Button_undebounce+0xf4>
 800045e:	4a25      	ldr	r2, [pc, #148]	; (80004f4 <Button_undebounce+0x10c>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	4925      	ldr	r1, [pc, #148]	; (80004fc <Button_undebounce+0x114>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d134      	bne.n	80004dc <Button_undebounce+0xf4>
		if(State2[i] != State3[i]){
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <Button_undebounce+0x114>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4922      	ldr	r1, [pc, #136]	; (8000504 <Button_undebounce+0x11c>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d015      	beq.n	80004b2 <Button_undebounce+0xca>
			State3[i] = State2[i];
 8000486:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <Button_undebounce+0x114>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491d      	ldr	r1, [pc, #116]	; (8000504 <Button_undebounce+0x11c>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(State3[i] == Press_state){
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <Button_undebounce+0x11c>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d11c      	bne.n	80004dc <Button_undebounce+0xf4>
				//TODO
				Waiting_time = 300;
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <Button_undebounce+0x120>)
 80004a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004a8:	601a      	str	r2, [r3, #0]
				Sub_key_pressed(i);
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f7ff ff58 	bl	8000360 <Sub_key_pressed>
 80004b0:	e014      	b.n	80004dc <Button_undebounce+0xf4>
			}
		}
		else{
			if(State3[i] == Press_state){
 80004b2:	4a14      	ldr	r2, [pc, #80]	; (8000504 <Button_undebounce+0x11c>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d10e      	bne.n	80004dc <Button_undebounce+0xf4>
			Waiting_time --;
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <Button_undebounce+0x120>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	4a10      	ldr	r2, [pc, #64]	; (8000508 <Button_undebounce+0x120>)
 80004c6:	6013      	str	r3, [r2, #0]
			if(Waiting_time == 0){
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <Button_undebounce+0x120>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d105      	bne.n	80004dc <Button_undebounce+0xf4>
				//TODO
				Waiting_time = 100;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <Button_undebounce+0x120>)
 80004d2:	2264      	movs	r2, #100	; 0x64
 80004d4:	601a      	str	r2, [r3, #0]
				Sub_long_pressed(i);
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff ff64 	bl	80003a4 <Sub_long_pressed>
	for(int i= 0; i<= 2;i++){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	dd85      	ble.n	80003f4 <Button_undebounce+0xc>
			}
		}

	}
}
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000034 	.word	0x20000034
 80004f8:	20000028 	.word	0x20000028
 80004fc:	20000040 	.word	0x20000040
 8000500:	40011000 	.word	0x40011000
 8000504:	2000004c 	.word	0x2000004c
 8000508:	20000058 	.word	0x20000058

0800050c <fsm_7segment_auto_run>:
 *      Author: HAU
 */

#include "fsm_7segment_auto.h"

void fsm_7segment_auto_run(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
		switch(led_counter){
 8000510:	4ba7      	ldr	r3, [pc, #668]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3b1e      	subs	r3, #30
 8000516:	2b09      	cmp	r3, #9
 8000518:	f200 8290 	bhi.w	8000a3c <fsm_7segment_auto_run+0x530>
 800051c:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <fsm_7segment_auto_run+0x18>)
 800051e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000522:	bf00      	nop
 8000524:	0800054d 	.word	0x0800054d
 8000528:	080005c7 	.word	0x080005c7
 800052c:	08000641 	.word	0x08000641
 8000530:	080006bb 	.word	0x080006bb
 8000534:	08000735 	.word	0x08000735
 8000538:	080007b9 	.word	0x080007b9
 800053c:	08000833 	.word	0x08000833
 8000540:	080008ad 	.word	0x080008ad
 8000544:	08000927 	.word	0x08000927
 8000548:	0800099f 	.word	0x0800099f
		case 30:
			segment_led_run(0);
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff fdfd 	bl	800014c <segment_led_run>
			if(Is_button1_pressed() == 1){
 8000552:	f7ff feab 	bl	80002ac <Is_button1_pressed>
 8000556:	4603      	mov	r3, r0
 8000558:	2b01      	cmp	r3, #1
 800055a:	d102      	bne.n	8000562 <fsm_7segment_auto_run+0x56>
				led_counter = 0;
 800055c:	4b94      	ldr	r3, [pc, #592]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 8000562:	f7ff feb5 	bl	80002d0 <Is_buttonINC_pressed>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d102      	bne.n	8000572 <fsm_7segment_auto_run+0x66>
				led_counter = 1;
 800056c:	4b90      	ldr	r3, [pc, #576]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 8000572:	f7ff fed1 	bl	8000318 <Is_buttonDEC_pressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d102      	bne.n	8000582 <fsm_7segment_auto_run+0x76>
				led_counter = 9;
 800057c:	4b8c      	ldr	r3, [pc, #560]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 800057e:	2209      	movs	r2, #9
 8000580:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 8000582:	f7ff feb7 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d105      	bne.n	8000598 <fsm_7segment_auto_run+0x8c>
				led_counter = 21;
 800058c:	4b88      	ldr	r3, [pc, #544]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 800058e:	2215      	movs	r2, #21
 8000590:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f001 f854 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 8000598:	f7ff fed0 	bl	800033c <Is_buttonDEC_long_pressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d105      	bne.n	80005ae <fsm_7segment_auto_run+0xa2>
				led_counter = 29;
 80005a2:	4b83      	ldr	r3, [pc, #524]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80005a4:	221d      	movs	r2, #29
 80005a6:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f001 f849 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 80005ae:	4b81      	ldr	r3, [pc, #516]	; (80007b4 <fsm_7segment_auto_run+0x2a8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	f040 822f 	bne.w	8000a16 <fsm_7segment_auto_run+0x50a>
					led_counter = 30;
 80005b8:	4b7d      	ldr	r3, [pc, #500]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80005ba:	221e      	movs	r2, #30
 80005bc:	601a      	str	r2, [r3, #0]
					Set_timer1(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f001 f83e 	bl	8001640 <Set_timer1>
			}
			break;
 80005c4:	e227      	b.n	8000a16 <fsm_7segment_auto_run+0x50a>
		case 31:
			segment_led_run(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff fdc0 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 80005cc:	f7ff fe6e 	bl	80002ac <Is_button1_pressed>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d102      	bne.n	80005dc <fsm_7segment_auto_run+0xd0>
				led_counter = 0;
 80005d6:	4b76      	ldr	r3, [pc, #472]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 80005dc:	f7ff fe78 	bl	80002d0 <Is_buttonINC_pressed>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d102      	bne.n	80005ec <fsm_7segment_auto_run+0xe0>
				led_counter = 2;
 80005e6:	4b72      	ldr	r3, [pc, #456]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 80005ec:	f7ff fe94 	bl	8000318 <Is_buttonDEC_pressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d102      	bne.n	80005fc <fsm_7segment_auto_run+0xf0>
				led_counter = 0;
 80005f6:	4b6e      	ldr	r3, [pc, #440]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 80005fc:	f7ff fe7a 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d105      	bne.n	8000612 <fsm_7segment_auto_run+0x106>
				led_counter = 22;
 8000606:	4b6a      	ldr	r3, [pc, #424]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000608:	2216      	movs	r2, #22
 800060a:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f001 f817 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 8000612:	f7ff fe93 	bl	800033c <Is_buttonDEC_long_pressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d105      	bne.n	8000628 <fsm_7segment_auto_run+0x11c>
				led_counter = 20;
 800061c:	4b64      	ldr	r3, [pc, #400]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 800061e:	2214      	movs	r2, #20
 8000620:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 f80c 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 8000628:	4b62      	ldr	r3, [pc, #392]	; (80007b4 <fsm_7segment_auto_run+0x2a8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	f040 81f4 	bne.w	8000a1a <fsm_7segment_auto_run+0x50e>
				led_counter = 30;
 8000632:	4b5f      	ldr	r3, [pc, #380]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000634:	221e      	movs	r2, #30
 8000636:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f001 f801 	bl	8001640 <Set_timer1>

			}
			break;
 800063e:	e1ec      	b.n	8000a1a <fsm_7segment_auto_run+0x50e>
		case 32:
			segment_led_run(2);
 8000640:	2002      	movs	r0, #2
 8000642:	f7ff fd83 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 8000646:	f7ff fe31 	bl	80002ac <Is_button1_pressed>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d102      	bne.n	8000656 <fsm_7segment_auto_run+0x14a>
				led_counter = 0;
 8000650:	4b57      	ldr	r3, [pc, #348]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 8000656:	f7ff fe3b 	bl	80002d0 <Is_buttonINC_pressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d102      	bne.n	8000666 <fsm_7segment_auto_run+0x15a>
				led_counter = 3;
 8000660:	4b53      	ldr	r3, [pc, #332]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000662:	2203      	movs	r2, #3
 8000664:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 8000666:	f7ff fe57 	bl	8000318 <Is_buttonDEC_pressed>
 800066a:	4603      	mov	r3, r0
 800066c:	2b01      	cmp	r3, #1
 800066e:	d102      	bne.n	8000676 <fsm_7segment_auto_run+0x16a>
				led_counter = 1;
 8000670:	4b4f      	ldr	r3, [pc, #316]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000672:	2201      	movs	r2, #1
 8000674:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 8000676:	f7ff fe3d 	bl	80002f4 <Is_buttonINC_long_pressed>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d105      	bne.n	800068c <fsm_7segment_auto_run+0x180>
				led_counter = 23;
 8000680:	4b4b      	ldr	r3, [pc, #300]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000682:	2217      	movs	r2, #23
 8000684:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f000 ffda 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 800068c:	f7ff fe56 	bl	800033c <Is_buttonDEC_long_pressed>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d105      	bne.n	80006a2 <fsm_7segment_auto_run+0x196>
				led_counter = 21;
 8000696:	4b46      	ldr	r3, [pc, #280]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000698:	2215      	movs	r2, #21
 800069a:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 ffcf 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 80006a2:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <fsm_7segment_auto_run+0x2a8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	f040 81b9 	bne.w	8000a1e <fsm_7segment_auto_run+0x512>
				led_counter = 31;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80006ae:	221f      	movs	r2, #31
 80006b0:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f000 ffc4 	bl	8001640 <Set_timer1>
			}
			break;
 80006b8:	e1b1      	b.n	8000a1e <fsm_7segment_auto_run+0x512>
		case 33:
			segment_led_run(3);
 80006ba:	2003      	movs	r0, #3
 80006bc:	f7ff fd46 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 80006c0:	f7ff fdf4 	bl	80002ac <Is_button1_pressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d102      	bne.n	80006d0 <fsm_7segment_auto_run+0x1c4>
				led_counter = 0;
 80006ca:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 80006d0:	f7ff fdfe 	bl	80002d0 <Is_buttonINC_pressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <fsm_7segment_auto_run+0x1d4>
				led_counter = 4;
 80006da:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80006dc:	2204      	movs	r2, #4
 80006de:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 80006e0:	f7ff fe1a 	bl	8000318 <Is_buttonDEC_pressed>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d102      	bne.n	80006f0 <fsm_7segment_auto_run+0x1e4>
				led_counter = 2;
 80006ea:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 80006f0:	f7ff fe00 	bl	80002f4 <Is_buttonINC_long_pressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d105      	bne.n	8000706 <fsm_7segment_auto_run+0x1fa>
				led_counter = 24;
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80006fc:	2218      	movs	r2, #24
 80006fe:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f000 ff9d 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 8000706:	f7ff fe19 	bl	800033c <Is_buttonDEC_long_pressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d105      	bne.n	800071c <fsm_7segment_auto_run+0x210>
				led_counter = 22;
 8000710:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000712:	2216      	movs	r2, #22
 8000714:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f000 ff92 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <fsm_7segment_auto_run+0x2a8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	f040 817e 	bne.w	8000a22 <fsm_7segment_auto_run+0x516>
				led_counter = 32;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000728:	2220      	movs	r2, #32
 800072a:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f000 ff87 	bl	8001640 <Set_timer1>
			}
			break;
 8000732:	e176      	b.n	8000a22 <fsm_7segment_auto_run+0x516>
		case 34:
			segment_led_run(4);
 8000734:	2004      	movs	r0, #4
 8000736:	f7ff fd09 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 800073a:	f7ff fdb7 	bl	80002ac <Is_button1_pressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d102      	bne.n	800074a <fsm_7segment_auto_run+0x23e>
				led_counter = 0;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 800074a:	f7ff fdc1 	bl	80002d0 <Is_buttonINC_pressed>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d102      	bne.n	800075a <fsm_7segment_auto_run+0x24e>
				led_counter = 5;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000756:	2205      	movs	r2, #5
 8000758:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 800075a:	f7ff fddd 	bl	8000318 <Is_buttonDEC_pressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	d102      	bne.n	800076a <fsm_7segment_auto_run+0x25e>
				led_counter = 3;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000766:	2203      	movs	r2, #3
 8000768:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 800076a:	f7ff fdc3 	bl	80002f4 <Is_buttonINC_long_pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d105      	bne.n	8000780 <fsm_7segment_auto_run+0x274>
				led_counter = 25;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 8000776:	2219      	movs	r2, #25
 8000778:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f000 ff60 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 8000780:	f7ff fddc 	bl	800033c <Is_buttonDEC_long_pressed>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d105      	bne.n	8000796 <fsm_7segment_auto_run+0x28a>
				led_counter = 23;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 800078c:	2217      	movs	r2, #23
 800078e:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f000 ff55 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <fsm_7segment_auto_run+0x2a8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	f040 8143 	bne.w	8000a26 <fsm_7segment_auto_run+0x51a>
				led_counter = 33;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <fsm_7segment_auto_run+0x2a4>)
 80007a2:	2221      	movs	r2, #33	; 0x21
 80007a4:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80007a6:	2064      	movs	r0, #100	; 0x64
 80007a8:	f000 ff4a 	bl	8001640 <Set_timer1>
			}
			break;
 80007ac:	e13b      	b.n	8000a26 <fsm_7segment_auto_run+0x51a>
 80007ae:	bf00      	nop
 80007b0:	200000a0 	.word	0x200000a0
 80007b4:	200000a4 	.word	0x200000a4
		case 35:
			segment_led_run(5);
 80007b8:	2005      	movs	r0, #5
 80007ba:	f7ff fcc7 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 80007be:	f7ff fd75 	bl	80002ac <Is_button1_pressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d102      	bne.n	80007ce <fsm_7segment_auto_run+0x2c2>
				led_counter = 0;
 80007c8:	4b9d      	ldr	r3, [pc, #628]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 80007ce:	f7ff fd7f 	bl	80002d0 <Is_buttonINC_pressed>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d102      	bne.n	80007de <fsm_7segment_auto_run+0x2d2>
				led_counter = 6;
 80007d8:	4b99      	ldr	r3, [pc, #612]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80007da:	2206      	movs	r2, #6
 80007dc:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 80007de:	f7ff fd9b 	bl	8000318 <Is_buttonDEC_pressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d102      	bne.n	80007ee <fsm_7segment_auto_run+0x2e2>
				led_counter = 4;
 80007e8:	4b95      	ldr	r3, [pc, #596]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 80007ee:	f7ff fd81 	bl	80002f4 <Is_buttonINC_long_pressed>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d105      	bne.n	8000804 <fsm_7segment_auto_run+0x2f8>
				led_counter = 26;
 80007f8:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80007fa:	221a      	movs	r2, #26
 80007fc:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f000 ff1e 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 8000804:	f7ff fd9a 	bl	800033c <Is_buttonDEC_long_pressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d105      	bne.n	800081a <fsm_7segment_auto_run+0x30e>
				led_counter = 24;
 800080e:	4b8c      	ldr	r3, [pc, #560]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000810:	2218      	movs	r2, #24
 8000812:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f000 ff13 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 800081a:	4b8a      	ldr	r3, [pc, #552]	; (8000a44 <fsm_7segment_auto_run+0x538>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	f040 8103 	bne.w	8000a2a <fsm_7segment_auto_run+0x51e>
				led_counter = 34;
 8000824:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000826:	2222      	movs	r2, #34	; 0x22
 8000828:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f000 ff08 	bl	8001640 <Set_timer1>
			}
			break;
 8000830:	e0fb      	b.n	8000a2a <fsm_7segment_auto_run+0x51e>
		case 36:
			segment_led_run(6);
 8000832:	2006      	movs	r0, #6
 8000834:	f7ff fc8a 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 8000838:	f7ff fd38 	bl	80002ac <Is_button1_pressed>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d102      	bne.n	8000848 <fsm_7segment_auto_run+0x33c>
				led_counter = 0;
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 8000848:	f7ff fd42 	bl	80002d0 <Is_buttonINC_pressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d102      	bne.n	8000858 <fsm_7segment_auto_run+0x34c>
				led_counter = 7;
 8000852:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 8000858:	f7ff fd5e 	bl	8000318 <Is_buttonDEC_pressed>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d102      	bne.n	8000868 <fsm_7segment_auto_run+0x35c>
				led_counter = 5;
 8000862:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000864:	2205      	movs	r2, #5
 8000866:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 8000868:	f7ff fd44 	bl	80002f4 <Is_buttonINC_long_pressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d105      	bne.n	800087e <fsm_7segment_auto_run+0x372>
				led_counter = 27;
 8000872:	4b73      	ldr	r3, [pc, #460]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000874:	221b      	movs	r2, #27
 8000876:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f000 fee1 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 800087e:	f7ff fd5d 	bl	800033c <Is_buttonDEC_long_pressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d105      	bne.n	8000894 <fsm_7segment_auto_run+0x388>
				led_counter = 25;
 8000888:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 800088a:	2219      	movs	r2, #25
 800088c:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800088e:	2064      	movs	r0, #100	; 0x64
 8000890:	f000 fed6 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 8000894:	4b6b      	ldr	r3, [pc, #428]	; (8000a44 <fsm_7segment_auto_run+0x538>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	f040 80c8 	bne.w	8000a2e <fsm_7segment_auto_run+0x522>
				led_counter = 35;
 800089e:	4b68      	ldr	r3, [pc, #416]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80008a0:	2223      	movs	r2, #35	; 0x23
 80008a2:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f000 fecb 	bl	8001640 <Set_timer1>
			}
			break;
 80008aa:	e0c0      	b.n	8000a2e <fsm_7segment_auto_run+0x522>
		case 37:
			segment_led_run(7);
 80008ac:	2007      	movs	r0, #7
 80008ae:	f7ff fc4d 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 80008b2:	f7ff fcfb 	bl	80002ac <Is_button1_pressed>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d102      	bne.n	80008c2 <fsm_7segment_auto_run+0x3b6>
				led_counter = 0;
 80008bc:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 80008c2:	f7ff fd05 	bl	80002d0 <Is_buttonINC_pressed>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d102      	bne.n	80008d2 <fsm_7segment_auto_run+0x3c6>
				led_counter = 8;
 80008cc:	4b5c      	ldr	r3, [pc, #368]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80008ce:	2208      	movs	r2, #8
 80008d0:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 80008d2:	f7ff fd21 	bl	8000318 <Is_buttonDEC_pressed>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d102      	bne.n	80008e2 <fsm_7segment_auto_run+0x3d6>
				led_counter = 6;
 80008dc:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80008de:	2206      	movs	r2, #6
 80008e0:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 80008e2:	f7ff fd07 	bl	80002f4 <Is_buttonINC_long_pressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d105      	bne.n	80008f8 <fsm_7segment_auto_run+0x3ec>
				led_counter = 28;
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80008ee:	221c      	movs	r2, #28
 80008f0:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f000 fea4 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 80008f8:	f7ff fd20 	bl	800033c <Is_buttonDEC_long_pressed>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d105      	bne.n	800090e <fsm_7segment_auto_run+0x402>
				led_counter = 26;
 8000902:	4b4f      	ldr	r3, [pc, #316]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000904:	221a      	movs	r2, #26
 8000906:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000908:	2064      	movs	r0, #100	; 0x64
 800090a:	f000 fe99 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 800090e:	4b4d      	ldr	r3, [pc, #308]	; (8000a44 <fsm_7segment_auto_run+0x538>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	f040 808d 	bne.w	8000a32 <fsm_7segment_auto_run+0x526>
				led_counter = 36;
 8000918:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 800091a:	2224      	movs	r2, #36	; 0x24
 800091c:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800091e:	2064      	movs	r0, #100	; 0x64
 8000920:	f000 fe8e 	bl	8001640 <Set_timer1>

			}
			break;
 8000924:	e085      	b.n	8000a32 <fsm_7segment_auto_run+0x526>
		case 38:
			segment_led_run(8);
 8000926:	2008      	movs	r0, #8
 8000928:	f7ff fc10 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 800092c:	f7ff fcbe 	bl	80002ac <Is_button1_pressed>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d102      	bne.n	800093c <fsm_7segment_auto_run+0x430>
				led_counter = 0;
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 800093c:	f7ff fcc8 	bl	80002d0 <Is_buttonINC_pressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <fsm_7segment_auto_run+0x440>
				led_counter = 9;
 8000946:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000948:	2209      	movs	r2, #9
 800094a:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 800094c:	f7ff fce4 	bl	8000318 <Is_buttonDEC_pressed>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d102      	bne.n	800095c <fsm_7segment_auto_run+0x450>
				led_counter = 7;
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 800095c:	f7ff fcca 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d105      	bne.n	8000972 <fsm_7segment_auto_run+0x466>
				led_counter = 29;
 8000966:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000968:	221d      	movs	r2, #29
 800096a:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f000 fe67 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 8000972:	f7ff fce3 	bl	800033c <Is_buttonDEC_long_pressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d105      	bne.n	8000988 <fsm_7segment_auto_run+0x47c>
				led_counter = 27;
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 800097e:	221b      	movs	r2, #27
 8000980:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 fe5c 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 8000988:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <fsm_7segment_auto_run+0x538>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d152      	bne.n	8000a36 <fsm_7segment_auto_run+0x52a>
				led_counter = 37;
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000992:	2225      	movs	r2, #37	; 0x25
 8000994:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000996:	2064      	movs	r0, #100	; 0x64
 8000998:	f000 fe52 	bl	8001640 <Set_timer1>
			}
			break;
 800099c:	e04b      	b.n	8000a36 <fsm_7segment_auto_run+0x52a>
		case 39:
			segment_led_run(9);
 800099e:	2009      	movs	r0, #9
 80009a0:	f7ff fbd4 	bl	800014c <segment_led_run>
			if(Is_button1_pressed()==1){
 80009a4:	f7ff fc82 	bl	80002ac <Is_button1_pressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d102      	bne.n	80009b4 <fsm_7segment_auto_run+0x4a8>
				led_counter = 0;
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_pressed() == 1){
 80009b4:	f7ff fc8c 	bl	80002d0 <Is_buttonINC_pressed>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d102      	bne.n	80009c4 <fsm_7segment_auto_run+0x4b8>
				led_counter = 0;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonDEC_pressed() == 1){
 80009c4:	f7ff fca8 	bl	8000318 <Is_buttonDEC_pressed>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d102      	bne.n	80009d4 <fsm_7segment_auto_run+0x4c8>
				led_counter = 8;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80009d0:	2208      	movs	r2, #8
 80009d2:	601a      	str	r2, [r3, #0]
			}
			if(Is_buttonINC_long_pressed() == 1){
 80009d4:	f7ff fc8e 	bl	80002f4 <Is_buttonINC_long_pressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d105      	bne.n	80009ea <fsm_7segment_auto_run+0x4de>
				led_counter = 0;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f000 fe2b 	bl	8001640 <Set_timer1>
			}
			if(Is_buttonDEC_long_pressed() == 1){
 80009ea:	f7ff fca7 	bl	800033c <Is_buttonDEC_long_pressed>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d105      	bne.n	8000a00 <fsm_7segment_auto_run+0x4f4>
				led_counter = 2;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f000 fe20 	bl	8001640 <Set_timer1>
			}
			if(timer1_flag == 1){
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <fsm_7segment_auto_run+0x538>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d118      	bne.n	8000a3a <fsm_7segment_auto_run+0x52e>
				led_counter = 38;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <fsm_7segment_auto_run+0x534>)
 8000a0a:	2226      	movs	r2, #38	; 0x26
 8000a0c:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000a0e:	2064      	movs	r0, #100	; 0x64
 8000a10:	f000 fe16 	bl	8001640 <Set_timer1>
			}
			break;
 8000a14:	e011      	b.n	8000a3a <fsm_7segment_auto_run+0x52e>
			break;
 8000a16:	bf00      	nop
 8000a18:	e010      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a1a:	bf00      	nop
 8000a1c:	e00e      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a1e:	bf00      	nop
 8000a20:	e00c      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a22:	bf00      	nop
 8000a24:	e00a      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a26:	bf00      	nop
 8000a28:	e008      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a2a:	bf00      	nop
 8000a2c:	e006      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a2e:	bf00      	nop
 8000a30:	e004      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a32:	bf00      	nop
 8000a34:	e002      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <fsm_7segment_auto_run+0x530>
			break;
 8000a3a:	bf00      	nop
		}

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000a0 	.word	0x200000a0
 8000a44:	200000a4 	.word	0x200000a4

08000a48 <fsm_button_long_pressed_run>:
 *      Author: HAU
 */
#include "global.h"


void fsm_button_long_pressed_run(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	switch(led_counter){
 8000a4c:	4bbc      	ldr	r3, [pc, #752]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b14      	subs	r3, #20
 8000a52:	2b09      	cmp	r3, #9
 8000a54:	f200 81e2 	bhi.w	8000e1c <fsm_button_long_pressed_run+0x3d4>
 8000a58:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <fsm_button_long_pressed_run+0x18>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000a89 	.word	0x08000a89
 8000a64:	08000ae1 	.word	0x08000ae1
 8000a68:	08000b39 	.word	0x08000b39
 8000a6c:	08000b91 	.word	0x08000b91
 8000a70:	08000be9 	.word	0x08000be9
 8000a74:	08000c41 	.word	0x08000c41
 8000a78:	08000c99 	.word	0x08000c99
 8000a7c:	08000cf1 	.word	0x08000cf1
 8000a80:	08000d51 	.word	0x08000d51
 8000a84:	08000da1 	.word	0x08000da1
	case 20:
		segment_led_run(0);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fb5f 	bl	800014c <segment_led_run>
		if(Is_button1_pressed() == 1){
 8000a8e:	f7ff fc0d 	bl	80002ac <Is_button1_pressed>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d102      	bne.n	8000a9e <fsm_button_long_pressed_run+0x56>
			led_counter = 0;
 8000a98:	4ba9      	ldr	r3, [pc, #676]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000a9e:	4ba9      	ldr	r3, [pc, #676]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	f040 81a7 	bne.w	8000df6 <fsm_button_long_pressed_run+0x3ae>
			if(Is_buttonINC_long_pressed()==1){
 8000aa8:	f7ff fc24 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d106      	bne.n	8000ac0 <fsm_button_long_pressed_run+0x78>
			led_counter = 21;
 8000ab2:	4ba3      	ldr	r3, [pc, #652]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000ab4:	2215      	movs	r2, #21
 8000ab6:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000ab8:	2064      	movs	r0, #100	; 0x64
 8000aba:	f000 fdc1 	bl	8001640 <Set_timer1>
			else{
			led_counter = 0;

			}
		}
		break;
 8000abe:	e19a      	b.n	8000df6 <fsm_button_long_pressed_run+0x3ae>
			else if(Is_buttonINC_long_pressed()==1){
 8000ac0:	f7ff fc18 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d106      	bne.n	8000ad8 <fsm_button_long_pressed_run+0x90>
			led_counter = 29;
 8000aca:	4b9d      	ldr	r3, [pc, #628]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000acc:	221d      	movs	r2, #29
 8000ace:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000ad0:	2064      	movs	r0, #100	; 0x64
 8000ad2:	f000 fdb5 	bl	8001640 <Set_timer1>
		break;
 8000ad6:	e18e      	b.n	8000df6 <fsm_button_long_pressed_run+0x3ae>
			led_counter = 0;
 8000ad8:	4b99      	ldr	r3, [pc, #612]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
		break;
 8000ade:	e18a      	b.n	8000df6 <fsm_button_long_pressed_run+0x3ae>
	case 21:
		segment_led_run(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fb33 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000ae6:	f7ff fbe1 	bl	80002ac <Is_button1_pressed>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d102      	bne.n	8000af6 <fsm_button_long_pressed_run+0xae>
			led_counter = 0;
 8000af0:	4b93      	ldr	r3, [pc, #588]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000af6:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 817d 	bne.w	8000dfa <fsm_button_long_pressed_run+0x3b2>
			if(Is_buttonINC_long_pressed()==1){
 8000b00:	f7ff fbf8 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d106      	bne.n	8000b18 <fsm_button_long_pressed_run+0xd0>
			led_counter = 22;
 8000b0a:	4b8d      	ldr	r3, [pc, #564]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000b0c:	2216      	movs	r2, #22
 8000b0e:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f000 fd95 	bl	8001640 <Set_timer1>
			else{
			led_counter = 1;

			}
		}
		break;
 8000b16:	e170      	b.n	8000dfa <fsm_button_long_pressed_run+0x3b2>
			else if(Is_buttonDEC_long_pressed()==1){
 8000b18:	f7ff fc10 	bl	800033c <Is_buttonDEC_long_pressed>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d106      	bne.n	8000b30 <fsm_button_long_pressed_run+0xe8>
			led_counter = 20;
 8000b22:	4b87      	ldr	r3, [pc, #540]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000b24:	2214      	movs	r2, #20
 8000b26:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f000 fd89 	bl	8001640 <Set_timer1>
		break;
 8000b2e:	e164      	b.n	8000dfa <fsm_button_long_pressed_run+0x3b2>
			led_counter = 1;
 8000b30:	4b83      	ldr	r3, [pc, #524]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
		break;
 8000b36:	e160      	b.n	8000dfa <fsm_button_long_pressed_run+0x3b2>
	case 22:
		segment_led_run(2);
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fb07 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000b3e:	f7ff fbb5 	bl	80002ac <Is_button1_pressed>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d102      	bne.n	8000b4e <fsm_button_long_pressed_run+0x106>
			led_counter = 0;
 8000b48:	4b7d      	ldr	r3, [pc, #500]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000b4e:	4b7d      	ldr	r3, [pc, #500]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	f040 8153 	bne.w	8000dfe <fsm_button_long_pressed_run+0x3b6>
			if(Is_buttonINC_long_pressed()==1){
 8000b58:	f7ff fbcc 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d106      	bne.n	8000b70 <fsm_button_long_pressed_run+0x128>
			led_counter = 23;
 8000b62:	4b77      	ldr	r3, [pc, #476]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000b64:	2217      	movs	r2, #23
 8000b66:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f000 fd69 	bl	8001640 <Set_timer1>
			else{
			led_counter = 2;

			}
		}
		break;
 8000b6e:	e146      	b.n	8000dfe <fsm_button_long_pressed_run+0x3b6>
			else if(Is_buttonDEC_long_pressed()==1){
 8000b70:	f7ff fbe4 	bl	800033c <Is_buttonDEC_long_pressed>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d106      	bne.n	8000b88 <fsm_button_long_pressed_run+0x140>
			led_counter = 21;
 8000b7a:	4b71      	ldr	r3, [pc, #452]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000b7c:	2215      	movs	r2, #21
 8000b7e:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000b80:	2064      	movs	r0, #100	; 0x64
 8000b82:	f000 fd5d 	bl	8001640 <Set_timer1>
		break;
 8000b86:	e13a      	b.n	8000dfe <fsm_button_long_pressed_run+0x3b6>
			led_counter = 2;
 8000b88:	4b6d      	ldr	r3, [pc, #436]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
		break;
 8000b8e:	e136      	b.n	8000dfe <fsm_button_long_pressed_run+0x3b6>
	case 23:
		segment_led_run(3);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f7ff fadb 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000b96:	f7ff fb89 	bl	80002ac <Is_button1_pressed>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d102      	bne.n	8000ba6 <fsm_button_long_pressed_run+0x15e>
			led_counter = 0;
 8000ba0:	4b67      	ldr	r3, [pc, #412]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000ba6:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	f040 8129 	bne.w	8000e02 <fsm_button_long_pressed_run+0x3ba>
			if(Is_buttonINC_long_pressed()==1){
 8000bb0:	f7ff fba0 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d106      	bne.n	8000bc8 <fsm_button_long_pressed_run+0x180>
			led_counter = 24;
 8000bba:	4b61      	ldr	r3, [pc, #388]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000bbc:	2218      	movs	r2, #24
 8000bbe:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f000 fd3d 	bl	8001640 <Set_timer1>
			else{
			led_counter = 3;

			}
		}
		break;
 8000bc6:	e11c      	b.n	8000e02 <fsm_button_long_pressed_run+0x3ba>
			else if(Is_buttonDEC_long_pressed()==1){
 8000bc8:	f7ff fbb8 	bl	800033c <Is_buttonDEC_long_pressed>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d106      	bne.n	8000be0 <fsm_button_long_pressed_run+0x198>
			led_counter = 22;
 8000bd2:	4b5b      	ldr	r3, [pc, #364]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000bd4:	2216      	movs	r2, #22
 8000bd6:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f000 fd31 	bl	8001640 <Set_timer1>
		break;
 8000bde:	e110      	b.n	8000e02 <fsm_button_long_pressed_run+0x3ba>
			led_counter = 3;
 8000be0:	4b57      	ldr	r3, [pc, #348]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000be2:	2203      	movs	r2, #3
 8000be4:	601a      	str	r2, [r3, #0]
		break;
 8000be6:	e10c      	b.n	8000e02 <fsm_button_long_pressed_run+0x3ba>
	case 24:
		segment_led_run(4);
 8000be8:	2004      	movs	r0, #4
 8000bea:	f7ff faaf 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000bee:	f7ff fb5d 	bl	80002ac <Is_button1_pressed>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d102      	bne.n	8000bfe <fsm_button_long_pressed_run+0x1b6>
			led_counter = 0;
 8000bf8:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000bfe:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	f040 80ff 	bne.w	8000e06 <fsm_button_long_pressed_run+0x3be>
			if(Is_buttonINC_long_pressed()==1){
 8000c08:	f7ff fb74 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d106      	bne.n	8000c20 <fsm_button_long_pressed_run+0x1d8>
			led_counter = 25;
 8000c12:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000c14:	2219      	movs	r2, #25
 8000c16:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000c18:	2064      	movs	r0, #100	; 0x64
 8000c1a:	f000 fd11 	bl	8001640 <Set_timer1>
			else{
			led_counter = 4;

			}
		}
		break;
 8000c1e:	e0f2      	b.n	8000e06 <fsm_button_long_pressed_run+0x3be>
			else if(Is_buttonDEC_long_pressed()==1){
 8000c20:	f7ff fb8c 	bl	800033c <Is_buttonDEC_long_pressed>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d106      	bne.n	8000c38 <fsm_button_long_pressed_run+0x1f0>
			led_counter = 23;
 8000c2a:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000c2c:	2217      	movs	r2, #23
 8000c2e:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f000 fd05 	bl	8001640 <Set_timer1>
		break;
 8000c36:	e0e6      	b.n	8000e06 <fsm_button_long_pressed_run+0x3be>
			led_counter = 4;
 8000c38:	4b41      	ldr	r3, [pc, #260]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	601a      	str	r2, [r3, #0]
		break;
 8000c3e:	e0e2      	b.n	8000e06 <fsm_button_long_pressed_run+0x3be>
	case 25:
		segment_led_run(5);
 8000c40:	2005      	movs	r0, #5
 8000c42:	f7ff fa83 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000c46:	f7ff fb31 	bl	80002ac <Is_button1_pressed>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d102      	bne.n	8000c56 <fsm_button_long_pressed_run+0x20e>
			led_counter = 0;
 8000c50:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000c56:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	f040 80d5 	bne.w	8000e0a <fsm_button_long_pressed_run+0x3c2>
			if(Is_buttonINC_long_pressed()==1){
 8000c60:	f7ff fb48 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d106      	bne.n	8000c78 <fsm_button_long_pressed_run+0x230>
			led_counter = 26;
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000c6c:	221a      	movs	r2, #26
 8000c6e:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f000 fce5 	bl	8001640 <Set_timer1>
				}
			else{
			led_counter = 5;
			}
		}
		break;
 8000c76:	e0c8      	b.n	8000e0a <fsm_button_long_pressed_run+0x3c2>
			else if(Is_buttonDEC_long_pressed()==1){
 8000c78:	f7ff fb60 	bl	800033c <Is_buttonDEC_long_pressed>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d106      	bne.n	8000c90 <fsm_button_long_pressed_run+0x248>
			led_counter = 24;
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000c84:	2218      	movs	r2, #24
 8000c86:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	f000 fcd9 	bl	8001640 <Set_timer1>
		break;
 8000c8e:	e0bc      	b.n	8000e0a <fsm_button_long_pressed_run+0x3c2>
			led_counter = 5;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000c92:	2205      	movs	r2, #5
 8000c94:	601a      	str	r2, [r3, #0]
		break;
 8000c96:	e0b8      	b.n	8000e0a <fsm_button_long_pressed_run+0x3c2>
	case 26:
		segment_led_run(6);
 8000c98:	2006      	movs	r0, #6
 8000c9a:	f7ff fa57 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000c9e:	f7ff fb05 	bl	80002ac <Is_button1_pressed>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d102      	bne.n	8000cae <fsm_button_long_pressed_run+0x266>
			led_counter = 0;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	f040 80ab 	bne.w	8000e0e <fsm_button_long_pressed_run+0x3c6>
			if(Is_buttonINC_long_pressed()==1){
 8000cb8:	f7ff fb1c 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d106      	bne.n	8000cd0 <fsm_button_long_pressed_run+0x288>
			led_counter = 27;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000cc4:	221b      	movs	r2, #27
 8000cc6:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f000 fcb9 	bl	8001640 <Set_timer1>
				}
			else{
			led_counter = 6;
			}
		}
		break;
 8000cce:	e09e      	b.n	8000e0e <fsm_button_long_pressed_run+0x3c6>
			else if(Is_buttonDEC_long_pressed()==1){
 8000cd0:	f7ff fb34 	bl	800033c <Is_buttonDEC_long_pressed>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d106      	bne.n	8000ce8 <fsm_button_long_pressed_run+0x2a0>
			led_counter = 25;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000cdc:	2219      	movs	r2, #25
 8000cde:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f000 fcad 	bl	8001640 <Set_timer1>
		break;
 8000ce6:	e092      	b.n	8000e0e <fsm_button_long_pressed_run+0x3c6>
			led_counter = 6;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000cea:	2206      	movs	r2, #6
 8000cec:	601a      	str	r2, [r3, #0]
		break;
 8000cee:	e08e      	b.n	8000e0e <fsm_button_long_pressed_run+0x3c6>
	case 27:
		segment_led_run(7);
 8000cf0:	2007      	movs	r0, #7
 8000cf2:	f7ff fa2b 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000cf6:	f7ff fad9 	bl	80002ac <Is_button1_pressed>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d102      	bne.n	8000d06 <fsm_button_long_pressed_run+0x2be>
			led_counter = 0;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <fsm_button_long_pressed_run+0x2fc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	f040 8081 	bne.w	8000e12 <fsm_button_long_pressed_run+0x3ca>
			if(Is_buttonINC_long_pressed()==1){
 8000d10:	f7ff faf0 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d106      	bne.n	8000d28 <fsm_button_long_pressed_run+0x2e0>
			led_counter = 28;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000d1c:	221c      	movs	r2, #28
 8000d1e:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f000 fc8d 	bl	8001640 <Set_timer1>
				}
			else{
			led_counter = 7;
			}
		}
		break;
 8000d26:	e074      	b.n	8000e12 <fsm_button_long_pressed_run+0x3ca>
			else if(Is_buttonDEC_long_pressed()==1){
 8000d28:	f7ff fb08 	bl	800033c <Is_buttonDEC_long_pressed>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d10a      	bne.n	8000d48 <fsm_button_long_pressed_run+0x300>
			led_counter = 26;
 8000d32:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <fsm_button_long_pressed_run+0x2f8>)
 8000d34:	221a      	movs	r2, #26
 8000d36:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000d38:	2064      	movs	r0, #100	; 0x64
 8000d3a:	f000 fc81 	bl	8001640 <Set_timer1>
		break;
 8000d3e:	e068      	b.n	8000e12 <fsm_button_long_pressed_run+0x3ca>
 8000d40:	200000a0 	.word	0x200000a0
 8000d44:	200000a4 	.word	0x200000a4
			led_counter = 7;
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	601a      	str	r2, [r3, #0]
		break;
 8000d4e:	e060      	b.n	8000e12 <fsm_button_long_pressed_run+0x3ca>
	case 28:
		segment_led_run(8);
 8000d50:	2008      	movs	r0, #8
 8000d52:	f7ff f9fb 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000d56:	f7ff faa9 	bl	80002ac <Is_button1_pressed>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d102      	bne.n	8000d66 <fsm_button_long_pressed_run+0x31e>
			led_counter = 0;
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <fsm_button_long_pressed_run+0x3dc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d153      	bne.n	8000e16 <fsm_button_long_pressed_run+0x3ce>
			if(Is_buttonINC_long_pressed()==1){
 8000d6e:	f7ff fac1 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d106      	bne.n	8000d86 <fsm_button_long_pressed_run+0x33e>
			led_counter = 29;
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000d7a:	221d      	movs	r2, #29
 8000d7c:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000d7e:	2064      	movs	r0, #100	; 0x64
 8000d80:	f000 fc5e 	bl	8001640 <Set_timer1>
				}
			else{
			led_counter = 8;
			}
		}
		break;
 8000d84:	e047      	b.n	8000e16 <fsm_button_long_pressed_run+0x3ce>
			else if(Is_buttonDEC_long_pressed()==1){
 8000d86:	f7ff fad9 	bl	800033c <Is_buttonDEC_long_pressed>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d103      	bne.n	8000d98 <fsm_button_long_pressed_run+0x350>
			led_counter = 27;
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000d92:	221b      	movs	r2, #27
 8000d94:	601a      	str	r2, [r3, #0]
		break;
 8000d96:	e03e      	b.n	8000e16 <fsm_button_long_pressed_run+0x3ce>
			led_counter = 8;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	601a      	str	r2, [r3, #0]
		break;
 8000d9e:	e03a      	b.n	8000e16 <fsm_button_long_pressed_run+0x3ce>
	case 29:
		segment_led_run(9);
 8000da0:	2009      	movs	r0, #9
 8000da2:	f7ff f9d3 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000da6:	f7ff fa81 	bl	80002ac <Is_button1_pressed>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d102      	bne.n	8000db6 <fsm_button_long_pressed_run+0x36e>
			led_counter = 0;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
		}
		if(timer1_flag == 1){
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <fsm_button_long_pressed_run+0x3dc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d12d      	bne.n	8000e1a <fsm_button_long_pressed_run+0x3d2>
			if(Is_buttonINC_long_pressed()==1){
 8000dbe:	f7ff fa99 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d106      	bne.n	8000dd6 <fsm_button_long_pressed_run+0x38e>
			led_counter = 20;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000dca:	2214      	movs	r2, #20
 8000dcc:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000dce:	2064      	movs	r0, #100	; 0x64
 8000dd0:	f000 fc36 	bl	8001640 <Set_timer1>
				}
			else{
			led_counter = 9;
			}
		}
		break;
 8000dd4:	e021      	b.n	8000e1a <fsm_button_long_pressed_run+0x3d2>
			else if(Is_buttonDEC_long_pressed()==1){
 8000dd6:	f7ff fab1 	bl	800033c <Is_buttonDEC_long_pressed>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d106      	bne.n	8000dee <fsm_button_long_pressed_run+0x3a6>
			led_counter = 28;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000de2:	221c      	movs	r2, #28
 8000de4:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f000 fc2a 	bl	8001640 <Set_timer1>
		break;
 8000dec:	e015      	b.n	8000e1a <fsm_button_long_pressed_run+0x3d2>
			led_counter = 9;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <fsm_button_long_pressed_run+0x3d8>)
 8000df0:	2209      	movs	r2, #9
 8000df2:	601a      	str	r2, [r3, #0]
		break;
 8000df4:	e011      	b.n	8000e1a <fsm_button_long_pressed_run+0x3d2>
		break;
 8000df6:	bf00      	nop
 8000df8:	e010      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000dfa:	bf00      	nop
 8000dfc:	e00e      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000dfe:	bf00      	nop
 8000e00:	e00c      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000e02:	bf00      	nop
 8000e04:	e00a      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000e06:	bf00      	nop
 8000e08:	e008      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000e0a:	bf00      	nop
 8000e0c:	e006      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000e0e:	bf00      	nop
 8000e10:	e004      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000e12:	bf00      	nop
 8000e14:	e002      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000e16:	bf00      	nop
 8000e18:	e000      	b.n	8000e1c <fsm_button_long_pressed_run+0x3d4>
		break;
 8000e1a:	bf00      	nop
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000a0 	.word	0x200000a0
 8000e24:	200000a4 	.word	0x200000a4

08000e28 <fsm_simple_button_run>:

#include "global.h"

int led_counter = 0;

void fsm_simple_button_run(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	switch(led_counter){
 8000e2c:	4bb3      	ldr	r3, [pc, #716]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b09      	cmp	r3, #9
 8000e32:	f200 82d4 	bhi.w	80013de <fsm_simple_button_run+0x5b6>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <fsm_simple_button_run+0x14>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e65 	.word	0x08000e65
 8000e40:	08000edb 	.word	0x08000edb
 8000e44:	08000f57 	.word	0x08000f57
 8000e48:	08000fe3 	.word	0x08000fe3
 8000e4c:	0800106f 	.word	0x0800106f
 8000e50:	08001105 	.word	0x08001105
 8000e54:	08001191 	.word	0x08001191
 8000e58:	0800121d 	.word	0x0800121d
 8000e5c:	080012a9 	.word	0x080012a9
 8000e60:	08001333 	.word	0x08001333
	case 0:
		segment_led_run(0);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff f971 	bl	800014c <segment_led_run>
		if(Is_button1_pressed() == 1){
 8000e6a:	f7ff fa1f 	bl	80002ac <Is_button1_pressed>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d102      	bne.n	8000e7a <fsm_simple_button_run+0x52>
			led_counter = 0;
 8000e74:	4ba1      	ldr	r3, [pc, #644]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed() == 1){
 8000e7a:	f7ff fa29 	bl	80002d0 <Is_buttonINC_pressed>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d106      	bne.n	8000e92 <fsm_simple_button_run+0x6a>
			led_counter = 1;
 8000e84:	4b9d      	ldr	r3, [pc, #628]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8000e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8e:	f000 fbd7 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed() == 1){
 8000e92:	f7ff fa41 	bl	8000318 <Is_buttonDEC_pressed>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <fsm_simple_button_run+0x82>
			led_counter = 9;
 8000e9c:	4b97      	ldr	r3, [pc, #604]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000e9e:	2209      	movs	r2, #9
 8000ea0:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8000ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea6:	f000 fbcb 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 8000eaa:	f7ff fa23 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d105      	bne.n	8000ec0 <fsm_simple_button_run+0x98>
			led_counter = 21;
 8000eb4:	4b91      	ldr	r3, [pc, #580]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000eb6:	2215      	movs	r2, #21
 8000eb8:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000eba:	2064      	movs	r0, #100	; 0x64
 8000ebc:	f000 fbc0 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 8000ec0:	f7ff fa3c 	bl	800033c <Is_buttonDEC_long_pressed>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	f040 8278 	bne.w	80013bc <fsm_simple_button_run+0x594>
			led_counter = 29;
 8000ecc:	4b8b      	ldr	r3, [pc, #556]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000ece:	221d      	movs	r2, #29
 8000ed0:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000ed2:	2064      	movs	r0, #100	; 0x64
 8000ed4:	f000 fbb4 	bl	8001640 <Set_timer1>
		}
		break;
 8000ed8:	e270      	b.n	80013bc <fsm_simple_button_run+0x594>
	case 1:
		if(Is_button1_pressed()==1){
 8000eda:	f7ff f9e7 	bl	80002ac <Is_button1_pressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d102      	bne.n	8000eea <fsm_simple_button_run+0xc2>
			led_counter = 0;
 8000ee4:	4b85      	ldr	r3, [pc, #532]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 8000eea:	f7ff f9f1 	bl	80002d0 <Is_buttonINC_pressed>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d106      	bne.n	8000f02 <fsm_simple_button_run+0xda>
			led_counter = 2;
 8000ef4:	4b81      	ldr	r3, [pc, #516]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8000efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efe:	f000 fb9f 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 8000f02:	f7ff fa09 	bl	8000318 <Is_buttonDEC_pressed>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d106      	bne.n	8000f1a <fsm_simple_button_run+0xf2>
			led_counter = 0;
 8000f0c:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8000f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f16:	f000 fb93 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 8000f1a:	f7ff f9eb 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <fsm_simple_button_run+0x108>
			led_counter = 22 ;
 8000f24:	4b75      	ldr	r3, [pc, #468]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000f26:	2216      	movs	r2, #22
 8000f28:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000f2a:	2064      	movs	r0, #100	; 0x64
 8000f2c:	f000 fb88 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 8000f30:	f7ff fa04 	bl	800033c <Is_buttonDEC_long_pressed>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d106      	bne.n	8000f48 <fsm_simple_button_run+0x120>
			led_counter = 20;
 8000f3a:	4b70      	ldr	r3, [pc, #448]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000f3c:	2214      	movs	r2, #20
 8000f3e:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f000 fb7d 	bl	8001640 <Set_timer1>
			if(timer1_flag == 1){
		}
			led_counter = 31;
			Set_timer1(100);
		}
		break;
 8000f46:	e24a      	b.n	80013de <fsm_simple_button_run+0x5b6>
			led_counter = 31;
 8000f48:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000f4a:	221f      	movs	r2, #31
 8000f4c:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000f4e:	2064      	movs	r0, #100	; 0x64
 8000f50:	f000 fb76 	bl	8001640 <Set_timer1>
		break;
 8000f54:	e243      	b.n	80013de <fsm_simple_button_run+0x5b6>
	case 2:
		segment_led_run(2);
 8000f56:	2002      	movs	r0, #2
 8000f58:	f7ff f8f8 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000f5c:	f7ff f9a6 	bl	80002ac <Is_button1_pressed>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d102      	bne.n	8000f6c <fsm_simple_button_run+0x144>
			led_counter = 0;
 8000f66:	4b65      	ldr	r3, [pc, #404]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 8000f6c:	f7ff f9b0 	bl	80002d0 <Is_buttonINC_pressed>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d106      	bne.n	8000f84 <fsm_simple_button_run+0x15c>
			led_counter = 3;
 8000f76:	4b61      	ldr	r3, [pc, #388]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f000 fb5e 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 8000f84:	f7ff f9c8 	bl	8000318 <Is_buttonDEC_pressed>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d106      	bne.n	8000f9c <fsm_simple_button_run+0x174>
			led_counter = 1;
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f98:	f000 fb52 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 8000f9c:	f7ff f9aa 	bl	80002f4 <Is_buttonINC_long_pressed>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d105      	bne.n	8000fb2 <fsm_simple_button_run+0x18a>
			led_counter = 23;
 8000fa6:	4b55      	ldr	r3, [pc, #340]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000fa8:	2217      	movs	r2, #23
 8000faa:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000fac:	2064      	movs	r0, #100	; 0x64
 8000fae:	f000 fb47 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 8000fb2:	f7ff f9c3 	bl	800033c <Is_buttonDEC_long_pressed>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d106      	bne.n	8000fca <fsm_simple_button_run+0x1a2>
			led_counter = 21;
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000fbe:	2215      	movs	r2, #21
 8000fc0:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f000 fb3c 	bl	8001640 <Set_timer1>
			if(timer1_flag == 1){
				led_counter = 32;
				Set_timer1(100);
			}
		}
		break;
 8000fc8:	e1fa      	b.n	80013c0 <fsm_simple_button_run+0x598>
			if(timer1_flag == 1){
 8000fca:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <fsm_simple_button_run+0x2d8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	f040 81f6 	bne.w	80013c0 <fsm_simple_button_run+0x598>
				led_counter = 32;
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f000 fb30 	bl	8001640 <Set_timer1>
		break;
 8000fe0:	e1ee      	b.n	80013c0 <fsm_simple_button_run+0x598>
	case 3:
		segment_led_run(3);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f7ff f8b2 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8000fe8:	f7ff f960 	bl	80002ac <Is_button1_pressed>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d102      	bne.n	8000ff8 <fsm_simple_button_run+0x1d0>
			led_counter = 0;
 8000ff2:	4b42      	ldr	r3, [pc, #264]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 8000ff8:	f7ff f96a 	bl	80002d0 <Is_buttonINC_pressed>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d106      	bne.n	8001010 <fsm_simple_button_run+0x1e8>
			led_counter = 4;
 8001002:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8001004:	2204      	movs	r2, #4
 8001006:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100c:	f000 fb18 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 8001010:	f7ff f982 	bl	8000318 <Is_buttonDEC_pressed>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d106      	bne.n	8001028 <fsm_simple_button_run+0x200>
			led_counter = 2;
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <fsm_simple_button_run+0x2d4>)
 800101c:	2202      	movs	r2, #2
 800101e:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	f000 fb0c 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 8001028:	f7ff f964 	bl	80002f4 <Is_buttonINC_long_pressed>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d105      	bne.n	800103e <fsm_simple_button_run+0x216>
			led_counter = 24;
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8001034:	2218      	movs	r2, #24
 8001036:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f000 fb01 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 800103e:	f7ff f97d 	bl	800033c <Is_buttonDEC_long_pressed>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <fsm_simple_button_run+0x22e>
			led_counter = 22;
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <fsm_simple_button_run+0x2d4>)
 800104a:	2216      	movs	r2, #22
 800104c:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f000 faf6 	bl	8001640 <Set_timer1>
			if(timer1_flag == 1){
				led_counter = 33;
				Set_timer1(100);
			}
		}
		break;
 8001054:	e1b6      	b.n	80013c4 <fsm_simple_button_run+0x59c>
			if(timer1_flag == 1){
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <fsm_simple_button_run+0x2d8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	f040 81b2 	bne.w	80013c4 <fsm_simple_button_run+0x59c>
				led_counter = 33;
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8001062:	2221      	movs	r2, #33	; 0x21
 8001064:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f000 faea 	bl	8001640 <Set_timer1>
		break;
 800106c:	e1aa      	b.n	80013c4 <fsm_simple_button_run+0x59c>
	case 4:
		segment_led_run(4);
 800106e:	2004      	movs	r0, #4
 8001070:	f7ff f86c 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8001074:	f7ff f91a 	bl	80002ac <Is_button1_pressed>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d102      	bne.n	8001084 <fsm_simple_button_run+0x25c>
			led_counter = 0;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 8001084:	f7ff f924 	bl	80002d0 <Is_buttonINC_pressed>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d106      	bne.n	800109c <fsm_simple_button_run+0x274>
			led_counter = 5;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <fsm_simple_button_run+0x2d4>)
 8001090:	2205      	movs	r2, #5
 8001092:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8001094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001098:	f000 fad2 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 800109c:	f7ff f93c 	bl	8000318 <Is_buttonDEC_pressed>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d106      	bne.n	80010b4 <fsm_simple_button_run+0x28c>
			led_counter = 3;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <fsm_simple_button_run+0x2d4>)
 80010a8:	2203      	movs	r2, #3
 80010aa:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 80010ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b0:	f000 fac6 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 80010b4:	f7ff f91e 	bl	80002f4 <Is_buttonINC_long_pressed>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d105      	bne.n	80010ca <fsm_simple_button_run+0x2a2>
			led_counter = 25;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <fsm_simple_button_run+0x2d4>)
 80010c0:	2219      	movs	r2, #25
 80010c2:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 80010c4:	2064      	movs	r0, #100	; 0x64
 80010c6:	f000 fabb 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 80010ca:	f7ff f937 	bl	800033c <Is_buttonDEC_long_pressed>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d106      	bne.n	80010e2 <fsm_simple_button_run+0x2ba>
			led_counter = 23;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <fsm_simple_button_run+0x2d4>)
 80010d6:	2217      	movs	r2, #23
 80010d8:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 80010da:	2064      	movs	r0, #100	; 0x64
 80010dc:	f000 fab0 	bl	8001640 <Set_timer1>
				if(timer1_flag == 1){
				led_counter = 34;
				Set_timer1(100);
			}
		}
		break;
 80010e0:	e172      	b.n	80013c8 <fsm_simple_button_run+0x5a0>
				if(timer1_flag == 1){
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <fsm_simple_button_run+0x2d8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	f040 816e 	bne.w	80013c8 <fsm_simple_button_run+0x5a0>
				led_counter = 34;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <fsm_simple_button_run+0x2d4>)
 80010ee:	2222      	movs	r2, #34	; 0x22
 80010f0:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80010f2:	2064      	movs	r0, #100	; 0x64
 80010f4:	f000 faa4 	bl	8001640 <Set_timer1>
		break;
 80010f8:	e166      	b.n	80013c8 <fsm_simple_button_run+0x5a0>
 80010fa:	bf00      	nop
 80010fc:	200000a0 	.word	0x200000a0
 8001100:	200000a4 	.word	0x200000a4
	case 5:

		segment_led_run(5);
 8001104:	2005      	movs	r0, #5
 8001106:	f7ff f821 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 800110a:	f7ff f8cf 	bl	80002ac <Is_button1_pressed>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d102      	bne.n	800111a <fsm_simple_button_run+0x2f2>
			led_counter = 0;
 8001114:	4bb3      	ldr	r3, [pc, #716]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 800111a:	f7ff f8d9 	bl	80002d0 <Is_buttonINC_pressed>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d106      	bne.n	8001132 <fsm_simple_button_run+0x30a>
			led_counter = 6;
 8001124:	4baf      	ldr	r3, [pc, #700]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001126:	2206      	movs	r2, #6
 8001128:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 800112a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112e:	f000 fa87 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 8001132:	f7ff f8f1 	bl	8000318 <Is_buttonDEC_pressed>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <fsm_simple_button_run+0x322>
			led_counter = 4;
 800113c:	4ba9      	ldr	r3, [pc, #676]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800113e:	2204      	movs	r2, #4
 8001140:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8001142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001146:	f000 fa7b 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 800114a:	f7ff f8d3 	bl	80002f4 <Is_buttonINC_long_pressed>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <fsm_simple_button_run+0x338>
			led_counter = 26;
 8001154:	4ba3      	ldr	r3, [pc, #652]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001156:	221a      	movs	r2, #26
 8001158:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f000 fa70 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 8001160:	f7ff f8ec 	bl	800033c <Is_buttonDEC_long_pressed>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d106      	bne.n	8001178 <fsm_simple_button_run+0x350>
			led_counter = 24;
 800116a:	4b9e      	ldr	r3, [pc, #632]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800116c:	2218      	movs	r2, #24
 800116e:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f000 fa65 	bl	8001640 <Set_timer1>
				if(timer1_flag == 1){
				led_counter = 35;
				Set_timer1(100);
			}
		}
		break;
 8001176:	e129      	b.n	80013cc <fsm_simple_button_run+0x5a4>
				if(timer1_flag == 1){
 8001178:	4b9b      	ldr	r3, [pc, #620]	; (80013e8 <fsm_simple_button_run+0x5c0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	f040 8125 	bne.w	80013cc <fsm_simple_button_run+0x5a4>
				led_counter = 35;
 8001182:	4b98      	ldr	r3, [pc, #608]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001184:	2223      	movs	r2, #35	; 0x23
 8001186:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f000 fa59 	bl	8001640 <Set_timer1>
		break;
 800118e:	e11d      	b.n	80013cc <fsm_simple_button_run+0x5a4>
	case 6:

		segment_led_run(6);
 8001190:	2006      	movs	r0, #6
 8001192:	f7fe ffdb 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8001196:	f7ff f889 	bl	80002ac <Is_button1_pressed>
 800119a:	4603      	mov	r3, r0
 800119c:	2b01      	cmp	r3, #1
 800119e:	d102      	bne.n	80011a6 <fsm_simple_button_run+0x37e>
			led_counter = 0;
 80011a0:	4b90      	ldr	r3, [pc, #576]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]

		}
		if(Is_buttonINC_pressed()==1){
 80011a6:	f7ff f893 	bl	80002d0 <Is_buttonINC_pressed>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d106      	bne.n	80011be <fsm_simple_button_run+0x396>
			led_counter = 7;
 80011b0:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80011b2:	2207      	movs	r2, #7
 80011b4:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 80011b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ba:	f000 fa41 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 80011be:	f7ff f8ab 	bl	8000318 <Is_buttonDEC_pressed>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d106      	bne.n	80011d6 <fsm_simple_button_run+0x3ae>
			led_counter = 5;
 80011c8:	4b86      	ldr	r3, [pc, #536]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80011ca:	2205      	movs	r2, #5
 80011cc:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 80011ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d2:	f000 fa35 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 80011d6:	f7ff f88d 	bl	80002f4 <Is_buttonINC_long_pressed>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <fsm_simple_button_run+0x3c4>
			led_counter = 27;
 80011e0:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80011e2:	221b      	movs	r2, #27
 80011e4:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f000 fa2a 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 80011ec:	f7ff f8a6 	bl	800033c <Is_buttonDEC_long_pressed>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d106      	bne.n	8001204 <fsm_simple_button_run+0x3dc>
			led_counter = 25;
 80011f6:	4b7b      	ldr	r3, [pc, #492]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80011f8:	2219      	movs	r2, #25
 80011fa:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f000 fa1f 	bl	8001640 <Set_timer1>
				if(timer1_flag == 1){
				led_counter = 36;
				Set_timer1(100);
			}
		}
		break;
 8001202:	e0e5      	b.n	80013d0 <fsm_simple_button_run+0x5a8>
				if(timer1_flag == 1){
 8001204:	4b78      	ldr	r3, [pc, #480]	; (80013e8 <fsm_simple_button_run+0x5c0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	f040 80e1 	bne.w	80013d0 <fsm_simple_button_run+0x5a8>
				led_counter = 36;
 800120e:	4b75      	ldr	r3, [pc, #468]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001210:	2224      	movs	r2, #36	; 0x24
 8001212:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f000 fa13 	bl	8001640 <Set_timer1>
		break;
 800121a:	e0d9      	b.n	80013d0 <fsm_simple_button_run+0x5a8>
	case 7:

		segment_led_run(7);
 800121c:	2007      	movs	r0, #7
 800121e:	f7fe ff95 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8001222:	f7ff f843 	bl	80002ac <Is_button1_pressed>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d102      	bne.n	8001232 <fsm_simple_button_run+0x40a>
			led_counter = 0;
 800122c:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 8001232:	f7ff f84d 	bl	80002d0 <Is_buttonINC_pressed>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d106      	bne.n	800124a <fsm_simple_button_run+0x422>
			led_counter = 8;
 800123c:	4b69      	ldr	r3, [pc, #420]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800123e:	2208      	movs	r2, #8
 8001240:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001246:	f000 f9fb 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 800124a:	f7ff f865 	bl	8000318 <Is_buttonDEC_pressed>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d106      	bne.n	8001262 <fsm_simple_button_run+0x43a>
			led_counter = 6;
 8001254:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001256:	2206      	movs	r2, #6
 8001258:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 800125a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125e:	f000 f9ef 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 8001262:	f7ff f847 	bl	80002f4 <Is_buttonINC_long_pressed>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <fsm_simple_button_run+0x450>
			led_counter = 28;
 800126c:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800126e:	221c      	movs	r2, #28
 8001270:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8001272:	2064      	movs	r0, #100	; 0x64
 8001274:	f000 f9e4 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 8001278:	f7ff f860 	bl	800033c <Is_buttonDEC_long_pressed>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d106      	bne.n	8001290 <fsm_simple_button_run+0x468>
			led_counter = 26;
 8001282:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001284:	221a      	movs	r2, #26
 8001286:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f000 f9d9 	bl	8001640 <Set_timer1>
				if(timer1_flag == 1){
				led_counter = 37;
				Set_timer1(100);
			}
		}
		break;
 800128e:	e0a1      	b.n	80013d4 <fsm_simple_button_run+0x5ac>
				if(timer1_flag == 1){
 8001290:	4b55      	ldr	r3, [pc, #340]	; (80013e8 <fsm_simple_button_run+0x5c0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 809d 	bne.w	80013d4 <fsm_simple_button_run+0x5ac>
				led_counter = 37;
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800129c:	2225      	movs	r2, #37	; 0x25
 800129e:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f000 f9cd 	bl	8001640 <Set_timer1>
		break;
 80012a6:	e095      	b.n	80013d4 <fsm_simple_button_run+0x5ac>
	case 8:

		segment_led_run(8);
 80012a8:	2008      	movs	r0, #8
 80012aa:	f7fe ff4f 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 80012ae:	f7fe fffd 	bl	80002ac <Is_button1_pressed>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <fsm_simple_button_run+0x496>
			led_counter = 0;
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 80012be:	f7ff f807 	bl	80002d0 <Is_buttonINC_pressed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <fsm_simple_button_run+0x4ae>
			led_counter = 9;
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80012ca:	2209      	movs	r2, #9
 80012cc:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 80012ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d2:	f000 f9b5 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 80012d6:	f7ff f81f 	bl	8000318 <Is_buttonDEC_pressed>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <fsm_simple_button_run+0x4c6>
			led_counter = 7;
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80012e2:	2207      	movs	r2, #7
 80012e4:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 80012e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ea:	f000 f9a9 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 80012ee:	f7ff f801 	bl	80002f4 <Is_buttonINC_long_pressed>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <fsm_simple_button_run+0x4dc>
			led_counter = 29;
 80012f8:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80012fa:	221d      	movs	r2, #29
 80012fc:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 80012fe:	2064      	movs	r0, #100	; 0x64
 8001300:	f000 f99e 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 8001304:	f7ff f81a 	bl	800033c <Is_buttonDEC_long_pressed>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d106      	bne.n	800131c <fsm_simple_button_run+0x4f4>
			led_counter = 27;
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001310:	221b      	movs	r2, #27
 8001312:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f000 f993 	bl	8001640 <Set_timer1>
				if(timer1_flag == 1){
				led_counter = 38;
				Set_timer1(100);
			}
		}
		break;
 800131a:	e05d      	b.n	80013d8 <fsm_simple_button_run+0x5b0>
				if(timer1_flag == 1){
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <fsm_simple_button_run+0x5c0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d159      	bne.n	80013d8 <fsm_simple_button_run+0x5b0>
				led_counter = 38;
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001326:	2226      	movs	r2, #38	; 0x26
 8001328:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 800132a:	2064      	movs	r0, #100	; 0x64
 800132c:	f000 f988 	bl	8001640 <Set_timer1>
		break;
 8001330:	e052      	b.n	80013d8 <fsm_simple_button_run+0x5b0>
	case 9:

		segment_led_run(9);
 8001332:	2009      	movs	r0, #9
 8001334:	f7fe ff0a 	bl	800014c <segment_led_run>
		if(Is_button1_pressed()==1){
 8001338:	f7fe ffb8 	bl	80002ac <Is_button1_pressed>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d102      	bne.n	8001348 <fsm_simple_button_run+0x520>
			led_counter = 0;
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
		}
		if(Is_buttonINC_pressed()==1){
 8001348:	f7fe ffc2 	bl	80002d0 <Is_buttonINC_pressed>
 800134c:	4603      	mov	r3, r0
 800134e:	2b01      	cmp	r3, #1
 8001350:	d106      	bne.n	8001360 <fsm_simple_button_run+0x538>
			led_counter = 0;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8001358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135c:	f000 f970 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_pressed()==1){
 8001360:	f7fe ffda 	bl	8000318 <Is_buttonDEC_pressed>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d106      	bne.n	8001378 <fsm_simple_button_run+0x550>
			led_counter = 8;
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800136c:	2208      	movs	r2, #8
 800136e:	601a      	str	r2, [r3, #0]
			Set_timer1(1000);
 8001370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001374:	f000 f964 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonINC_long_pressed() == 1){
 8001378:	f7fe ffbc 	bl	80002f4 <Is_buttonINC_long_pressed>
 800137c:	4603      	mov	r3, r0
 800137e:	2b01      	cmp	r3, #1
 8001380:	d105      	bne.n	800138e <fsm_simple_button_run+0x566>
			led_counter = 20;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 8001384:	2214      	movs	r2, #20
 8001386:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 8001388:	2064      	movs	r0, #100	; 0x64
 800138a:	f000 f959 	bl	8001640 <Set_timer1>
		}
		if(Is_buttonDEC_long_pressed() == 1){
 800138e:	f7fe ffd5 	bl	800033c <Is_buttonDEC_long_pressed>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d106      	bne.n	80013a6 <fsm_simple_button_run+0x57e>
			led_counter = 28;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 800139a:	221c      	movs	r2, #28
 800139c:	601a      	str	r2, [r3, #0]
			Set_timer1(100);
 800139e:	2064      	movs	r0, #100	; 0x64
 80013a0:	f000 f94e 	bl	8001640 <Set_timer1>
			if(timer1_flag == 1){
				led_counter = 39;
				Set_timer1(100);
			}
		}
		break;
 80013a4:	e01a      	b.n	80013dc <fsm_simple_button_run+0x5b4>
			if(timer1_flag == 1){
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <fsm_simple_button_run+0x5c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d116      	bne.n	80013dc <fsm_simple_button_run+0x5b4>
				led_counter = 39;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <fsm_simple_button_run+0x5bc>)
 80013b0:	2227      	movs	r2, #39	; 0x27
 80013b2:	601a      	str	r2, [r3, #0]
				Set_timer1(100);
 80013b4:	2064      	movs	r0, #100	; 0x64
 80013b6:	f000 f943 	bl	8001640 <Set_timer1>
		break;
 80013ba:	e00f      	b.n	80013dc <fsm_simple_button_run+0x5b4>
		break;
 80013bc:	bf00      	nop
 80013be:	e00e      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013c0:	bf00      	nop
 80013c2:	e00c      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013c4:	bf00      	nop
 80013c6:	e00a      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013c8:	bf00      	nop
 80013ca:	e008      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013cc:	bf00      	nop
 80013ce:	e006      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013d0:	bf00      	nop
 80013d2:	e004      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013d4:	bf00      	nop
 80013d6:	e002      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013d8:	bf00      	nop
 80013da:	e000      	b.n	80013de <fsm_simple_button_run+0x5b6>
		break;
 80013dc:	bf00      	nop
	}
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000a0 	.word	0x200000a0
 80013e8:	200000a4 	.word	0x200000a4

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f0:	f000 fa30 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f4:	f000 f81c 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f8:	f000 f8a2 	bl	8001540 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013fc:	f000 f854 	bl	80014a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <main+0x38>)
 8001402:	f001 f979 	bl	80026f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  led_state = 0;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <main+0x3c>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
  led_counter = 0;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <main+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_simple_button_run();
 8001412:	f7ff fd09 	bl	8000e28 <fsm_simple_button_run>
	  fsm_button_long_pressed_run();
 8001416:	f7ff fb17 	bl	8000a48 <fsm_button_long_pressed_run>
	  fsm_7segment_auto_run();
 800141a:	f7ff f877 	bl	800050c <fsm_7segment_auto_run>
	  blink_led_run();
 800141e:	f7fe ff01 	bl	8000224 <blink_led_run>
	  fsm_simple_button_run();
 8001422:	e7f6      	b.n	8001412 <main+0x26>
 8001424:	200000b4 	.word	0x200000b4
 8001428:	20000084 	.word	0x20000084
 800142c:	200000a0 	.word	0x200000a0

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b090      	sub	sp, #64	; 0x40
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	2228      	movs	r2, #40	; 0x28
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fd12 	bl	8002e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001456:	2301      	movs	r3, #1
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145a:	2310      	movs	r3, #16
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fd0e 	bl	8001e88 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001472:	f000 f8df 	bl	8001634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f000 ff7a 	bl	8002388 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800149a:	f000 f8cb 	bl	8001634 <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3740      	adds	r7, #64	; 0x40
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_TIM2_Init+0x94>)
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_TIM2_Init+0x94>)
 80014ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_TIM2_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_TIM2_Init+0x94>)
 80014dc:	2209      	movs	r2, #9
 80014de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_TIM2_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_TIM2_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_TIM2_Init+0x94>)
 80014ee:	f001 f8b3 	bl	8002658 <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014f8:	f000 f89c 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <MX_TIM2_Init+0x94>)
 800150a:	f001 fa49 	bl	80029a0 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001514:	f000 f88e 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_TIM2_Init+0x94>)
 8001526:	f001 fc11 	bl	8002d4c <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001530:	f000 f880 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000b4 	.word	0x200000b4

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_GPIO_Init+0xcc>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a2c      	ldr	r2, [pc, #176]	; (800160c <MX_GPIO_Init+0xcc>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_GPIO_Init+0xcc>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_GPIO_Init+0xcc>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a26      	ldr	r2, [pc, #152]	; (800160c <MX_GPIO_Init+0xcc>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_GPIO_Init+0xcc>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_GPIO_Init+0xcc>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a20      	ldr	r2, [pc, #128]	; (800160c <MX_GPIO_Init+0xcc>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_GPIO_Init+0xcc>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2170      	movs	r1, #112	; 0x70
 80015a0:	481b      	ldr	r0, [pc, #108]	; (8001610 <MX_GPIO_Init+0xd0>)
 80015a2:	f000 fc58 	bl	8001e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015a6:	2200      	movs	r2, #0
 80015a8:	217f      	movs	r1, #127	; 0x7f
 80015aa:	481a      	ldr	r0, [pc, #104]	; (8001614 <MX_GPIO_Init+0xd4>)
 80015ac:	f000 fc53 	bl	8001e56 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_GPIO_Init+0xd8>)
 80015c6:	f000 fab5 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015ca:	2370      	movs	r3, #112	; 0x70
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <MX_GPIO_Init+0xd0>)
 80015e2:	f000 faa7 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015e6:	237f      	movs	r3, #127	; 0x7f
 80015e8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_GPIO_Init+0xd4>)
 80015fe:	f000 fa99 	bl	8001b34 <HAL_GPIO_Init>

}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000

0800161c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	Timer_run();
 8001624:	f000 f834 	bl	8001690 <Timer_run>
	Button_undebounce();
 8001628:	f7fe fede 	bl	80003e8 <Button_undebounce>

}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	e7fe      	b.n	800163c <Error_Handler+0x8>
	...

08001640 <Set_timer1>:
int timer1_flag = 0;
int timer1_counter = 0;
int timer2_flag = 0;
int timer2_counter = 0;

void Set_timer1(int Time_set){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	timer1_counter = Time_set;
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <Set_timer1+0x20>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <Set_timer1+0x24>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200000a8 	.word	0x200000a8
 8001664:	200000a4 	.word	0x200000a4

08001668 <Set_timer2>:
void Set_timer2(int Time_set){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	timer2_counter = Time_set;
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <Set_timer2+0x20>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <Set_timer2+0x24>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200000b0 	.word	0x200000b0
 800168c:	200000ac 	.word	0x200000ac

08001690 <Timer_run>:
void Timer_run(){
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <Timer_run+0x4c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	dd0b      	ble.n	80016b4 <Timer_run+0x24>
		timer1_counter --;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <Timer_run+0x4c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <Timer_run+0x4c>)
 80016a4:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <Timer_run+0x4c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	dc02      	bgt.n	80016b4 <Timer_run+0x24>
			timer1_flag = 1;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <Timer_run+0x50>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <Timer_run+0x54>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	dd0b      	ble.n	80016d4 <Timer_run+0x44>
		timer2_counter --;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <Timer_run+0x54>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <Timer_run+0x54>)
 80016c4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <Timer_run+0x54>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dc02      	bgt.n	80016d4 <Timer_run+0x44>
			timer2_flag = 1;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <Timer_run+0x58>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
		}
	}

}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	200000a8 	.word	0x200000a8
 80016e0:	200000a4 	.word	0x200000a4
 80016e4:	200000b0 	.word	0x200000b0
 80016e8:	200000ac 	.word	0x200000ac

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_MspInit+0x5c>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_MspInit+0x5c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_MspInit+0x5c>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x5c>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_MspInit+0x5c>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_MspInit+0x5c>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_MspInit+0x60>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_MspInit+0x60>)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	40010000 	.word	0x40010000

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d113      	bne.n	800178a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_TIM_Base_MspInit+0x44>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_TIM_Base_MspInit+0x44>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_TIM_Base_MspInit+0x44>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201c      	movs	r0, #28
 8001780:	f000 f9a1 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001784:	201c      	movs	r0, #28
 8001786:	f000 f9ba 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017de:	f000 f87f 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM2_IRQHandler+0x10>)
 80017ee:	f000 ffcf 	bl	8002790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200000b4 	.word	0x200000b4

080017fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180a:	490d      	ldr	r1, [pc, #52]	; (8001840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001820:	4c0a      	ldr	r4, [pc, #40]	; (800184c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800182e:	f7ff ffe5 	bl	80017fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f001 faf5 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001836:	f7ff fdd9 	bl	80013ec <main>
  bx lr
 800183a:	4770      	bx	lr
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001844:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8001848:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800184c:	20000100 	.word	0x20000100

08001850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC1_2_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x28>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x28>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f923 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff ff3c 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40022000 	.word	0x40022000

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f93b 	bl	8001b1a <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f903 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000005c 	.word	0x2000005c
 80018d8:	20000064 	.word	0x20000064
 80018dc:	20000060 	.word	0x20000060

080018e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x1c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x20>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a03      	ldr	r2, [pc, #12]	; (8001900 <HAL_IncTick+0x20>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000064 	.word	0x20000064
 8001900:	200000fc 	.word	0x200000fc

08001904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <HAL_GetTick+0x10>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	200000fc 	.word	0x200000fc

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0b      	blt.n	80019a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4906      	ldr	r1, [pc, #24]	; (80019b0 <__NVIC_EnableIRQ+0x34>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff90 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff2d 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff42 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff90 	bl	8001a08 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5f 	bl	80019b4 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff35 	bl	800197c <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e148      	b.n	8001dda <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8137 	bne.w	8001dd4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4aa3      	ldr	r2, [pc, #652]	; (8001df8 <HAL_GPIO_Init+0x2c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d05e      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b70:	4aa1      	ldr	r2, [pc, #644]	; (8001df8 <HAL_GPIO_Init+0x2c4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d875      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b76:	4aa1      	ldr	r2, [pc, #644]	; (8001dfc <HAL_GPIO_Init+0x2c8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d058      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b7c:	4a9f      	ldr	r2, [pc, #636]	; (8001dfc <HAL_GPIO_Init+0x2c8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d86f      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b82:	4a9f      	ldr	r2, [pc, #636]	; (8001e00 <HAL_GPIO_Init+0x2cc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d052      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b88:	4a9d      	ldr	r2, [pc, #628]	; (8001e00 <HAL_GPIO_Init+0x2cc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d869      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b8e:	4a9d      	ldr	r2, [pc, #628]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d04c      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b94:	4a9b      	ldr	r2, [pc, #620]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d863      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b9a:	4a9b      	ldr	r2, [pc, #620]	; (8001e08 <HAL_GPIO_Init+0x2d4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d046      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001ba0:	4a99      	ldr	r2, [pc, #612]	; (8001e08 <HAL_GPIO_Init+0x2d4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d85d      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d82a      	bhi.n	8001c00 <HAL_GPIO_Init+0xcc>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d859      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_GPIO_Init+0x80>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c09 	.word	0x08001c09
 8001bbc:	08001c1b 	.word	0x08001c1b
 8001bc0:	08001c5d 	.word	0x08001c5d
 8001bc4:	08001c63 	.word	0x08001c63
 8001bc8:	08001c63 	.word	0x08001c63
 8001bcc:	08001c63 	.word	0x08001c63
 8001bd0:	08001c63 	.word	0x08001c63
 8001bd4:	08001c63 	.word	0x08001c63
 8001bd8:	08001c63 	.word	0x08001c63
 8001bdc:	08001c63 	.word	0x08001c63
 8001be0:	08001c63 	.word	0x08001c63
 8001be4:	08001c63 	.word	0x08001c63
 8001be8:	08001c63 	.word	0x08001c63
 8001bec:	08001c63 	.word	0x08001c63
 8001bf0:	08001c63 	.word	0x08001c63
 8001bf4:	08001c63 	.word	0x08001c63
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c25 	.word	0x08001c25
 8001c00:	4a82      	ldr	r2, [pc, #520]	; (8001e0c <HAL_GPIO_Init+0x2d8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c06:	e02c      	b.n	8001c62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e029      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	3304      	adds	r3, #4
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e024      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e01f      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e01a      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c36:	2304      	movs	r3, #4
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e013      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c44:	2308      	movs	r3, #8
 8001c46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	611a      	str	r2, [r3, #16]
          break;
 8001c4e:	e009      	b.n	8001c64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c50:	2308      	movs	r3, #8
 8001c52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	615a      	str	r2, [r3, #20]
          break;
 8001c5a:	e003      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          break;
 8001c62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d801      	bhi.n	8001c6e <HAL_GPIO_Init+0x13a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_Init+0x13e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2bff      	cmp	r3, #255	; 0xff
 8001c78:	d802      	bhi.n	8001c80 <HAL_GPIO_Init+0x14c>
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x152>
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3b08      	subs	r3, #8
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	6a39      	ldr	r1, [r7, #32]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8090 	beq.w	8001dd4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb4:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <HAL_GPIO_Init+0x2dc>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <HAL_GPIO_Init+0x2dc>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_GPIO_Init+0x2dc>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ccc:	4a51      	ldr	r2, [pc, #324]	; (8001e14 <HAL_GPIO_Init+0x2e0>)
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <HAL_GPIO_Init+0x2e4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00d      	beq.n	8001d14 <HAL_GPIO_Init+0x1e0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d007      	beq.n	8001d10 <HAL_GPIO_Init+0x1dc>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a47      	ldr	r2, [pc, #284]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_GPIO_Init+0x1d8>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e004      	b.n	8001d16 <HAL_GPIO_Init+0x1e2>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e002      	b.n	8001d16 <HAL_GPIO_Init+0x1e2>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_GPIO_Init+0x1e2>
 8001d14:	2300      	movs	r3, #0
 8001d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d18:	f002 0203 	and.w	r2, r2, #3
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	4093      	lsls	r3, r2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d26:	493b      	ldr	r1, [pc, #236]	; (8001e14 <HAL_GPIO_Init+0x2e0>)
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4937      	ldr	r1, [pc, #220]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	4933      	ldr	r1, [pc, #204]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	492d      	ldr	r1, [pc, #180]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4929      	ldr	r1, [pc, #164]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	4923      	ldr	r1, [pc, #140]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	491f      	ldr	r1, [pc, #124]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4919      	ldr	r1, [pc, #100]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4915      	ldr	r1, [pc, #84]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f aeaf 	bne.w	8001b48 <HAL_GPIO_Init+0x14>
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	372c      	adds	r7, #44	; 0x2c
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	10320000 	.word	0x10320000
 8001dfc:	10310000 	.word	0x10310000
 8001e00:	10220000 	.word	0x10220000
 8001e04:	10210000 	.word	0x10210000
 8001e08:	10120000 	.word	0x10120000
 8001e0c:	10110000 	.word	0x10110000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40010400 	.word	0x40010400

08001e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e001      	b.n	8001e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	807b      	strh	r3, [r7, #2]
 8001e62:	4613      	mov	r3, r2
 8001e64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e66:	787b      	ldrb	r3, [r7, #1]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6c:	887a      	ldrh	r2, [r7, #2]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e72:	e003      	b.n	8001e7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	041a      	lsls	r2, r3, #16
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	611a      	str	r2, [r3, #16]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e26c      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8087 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea8:	4b92      	ldr	r3, [pc, #584]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d00c      	beq.n	8001ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb4:	4b8f      	ldr	r3, [pc, #572]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d112      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5e>
 8001ec0:	4b8c      	ldr	r3, [pc, #560]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ece:	4b89      	ldr	r3, [pc, #548]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d06c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x12c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d168      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e246      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x76>
 8001ef0:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a7f      	ldr	r2, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e02e      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7a      	ldr	r2, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b78      	ldr	r3, [pc, #480]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a77      	ldr	r2, [pc, #476]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0xbc>
 8001f2a:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a71      	ldr	r2, [pc, #452]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6e      	ldr	r2, [pc, #440]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001f44:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fcce 	bl	8001904 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fcca 	bl	8001904 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1fa      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe4>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fcba 	bl	8001904 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fcb6 	bl	8001904 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1e6      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x10c>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fce:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d11c      	bne.n	8002014 <HAL_RCC_OscConfig+0x18c>
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x176>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e1ba      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4939      	ldr	r1, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	e03a      	b.n	800208a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fc6f 	bl	8001904 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202a:	f7ff fc6b 	bl	8001904 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e19b      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4927      	ldr	r1, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fc4e 	bl	8001904 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff fc4a 	bl	8001904 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e17a      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d03a      	beq.n	800210c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d019      	beq.n	80020d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_RCC_OscConfig+0x274>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7ff fc2e 	bl	8001904 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff fc2a 	bl	8001904 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e15a      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f000 faa6 	bl	800261c <RCC_Delay>
 80020d0:	e01c      	b.n	800210c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_RCC_OscConfig+0x274>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7ff fc14 	bl	8001904 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020de:	e00f      	b.n	8002100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e0:	f7ff fc10 	bl	8001904 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d908      	bls.n	8002100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e140      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	42420000 	.word	0x42420000
 80020fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	4b9e      	ldr	r3, [pc, #632]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e9      	bne.n	80020e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a6 	beq.w	8002266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211e:	4b97      	ldr	r3, [pc, #604]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10d      	bne.n	8002146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b94      	ldr	r3, [pc, #592]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a93      	ldr	r2, [pc, #588]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b91      	ldr	r3, [pc, #580]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <HAL_RCC_OscConfig+0x4f8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002152:	4b8b      	ldr	r3, [pc, #556]	; (8002380 <HAL_RCC_OscConfig+0x4f8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a8a      	ldr	r2, [pc, #552]	; (8002380 <HAL_RCC_OscConfig+0x4f8>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7ff fbd1 	bl	8001904 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7ff fbcd 	bl	8001904 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b64      	cmp	r3, #100	; 0x64
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0fd      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x4f8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x312>
 800218c:	4b7b      	ldr	r3, [pc, #492]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a7a      	ldr	r2, [pc, #488]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	e02d      	b.n	80021f6 <HAL_RCC_OscConfig+0x36e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x334>
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a75      	ldr	r2, [pc, #468]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b73      	ldr	r3, [pc, #460]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a72      	ldr	r2, [pc, #456]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	e01c      	b.n	80021f6 <HAL_RCC_OscConfig+0x36e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d10c      	bne.n	80021de <HAL_RCC_OscConfig+0x356>
 80021c4:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4a6c      	ldr	r2, [pc, #432]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a69      	ldr	r2, [pc, #420]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0x36e>
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a66      	ldr	r2, [pc, #408]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b64      	ldr	r3, [pc, #400]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a63      	ldr	r2, [pc, #396]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d015      	beq.n	800222a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fb81 	bl	8001904 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7ff fb7d 	bl	8001904 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0ab      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	4b57      	ldr	r3, [pc, #348]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ee      	beq.n	8002206 <HAL_RCC_OscConfig+0x37e>
 8002228:	e014      	b.n	8002254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7ff fb6b 	bl	8001904 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7ff fb67 	bl	8001904 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e095      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	4b4c      	ldr	r3, [pc, #304]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ee      	bne.n	8002232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a47      	ldr	r2, [pc, #284]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8081 	beq.w	8002372 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002270:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d061      	beq.n	8002340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d146      	bne.n	8002312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0x4fc>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7ff fb3b 	bl	8001904 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002292:	f7ff fb37 	bl	8001904 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e067      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d108      	bne.n	80022cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ba:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	492d      	ldr	r1, [pc, #180]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a19      	ldr	r1, [r3, #32]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	430b      	orrs	r3, r1
 80022de:	4927      	ldr	r1, [pc, #156]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x4fc>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fb0b 	bl	8001904 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff fb07 	bl	8001904 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e037      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x46a>
 8002310:	e02f      	b.n	8002372 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_RCC_OscConfig+0x4fc>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7ff faf4 	bl	8001904 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7ff faf0 	bl	8001904 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e020      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x498>
 800233e:	e018      	b.n	8002372 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	429a      	cmp	r2, r3
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
 8002384:	42420060 	.word	0x42420060

08002388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0d0      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b6a      	ldr	r3, [pc, #424]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d910      	bls.n	80023cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b67      	ldr	r3, [pc, #412]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4965      	ldr	r1, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d040      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e073      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06b      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7ff fa44 	bl	8001904 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7ff fa40 	bl	8001904 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e053      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d210      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4922      	ldr	r1, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1cc>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1d0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f9a2 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	08002ea0 	.word	0x08002ea0
 8002554:	2000005c 	.word	0x2000005c
 8002558:	20000060 	.word	0x20000060

0800255c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b490      	push	{r4, r7}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002564:	1d3c      	adds	r4, r7, #4
 8002566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800256c:	f240 2301 	movw	r3, #513	; 0x201
 8002570:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x46>
 800259a:	e02d      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800259e:	623b      	str	r3, [r7, #32]
      break;
 80025a0:	e02d      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ae:	4413      	add	r3, r2
 80025b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	0c5b      	lsrs	r3, r3, #17
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ce:	4413      	add	r3, r2
 80025d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025da:	fb02 f203 	mul.w	r2, r2, r3
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	e004      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	623b      	str	r3, [r7, #32]
      break;
 80025f6:	e002      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fa:	623b      	str	r3, [r7, #32]
      break;
 80025fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bc90      	pop	{r4, r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	08002e90 	.word	0x08002e90
 8002610:	40021000 	.word	0x40021000
 8002614:	007a1200 	.word	0x007a1200
 8002618:	003d0900 	.word	0x003d0900

0800261c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <RCC_Delay+0x34>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <RCC_Delay+0x38>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a5b      	lsrs	r3, r3, #9
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002638:	bf00      	nop
  }
  while (Delay --);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	60fa      	str	r2, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <RCC_Delay+0x1c>
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	2000005c 	.word	0x2000005c
 8002654:	10624dd3 	.word	0x10624dd3

08002658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e041      	b.n	80026ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff f866 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3304      	adds	r3, #4
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f000 fa6a 	bl	8002b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d001      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e035      	b.n	800277c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a16      	ldr	r2, [pc, #88]	; (8002788 <HAL_TIM_Base_Start_IT+0x90>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d009      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x4e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d004      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x4e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_TIM_Base_Start_IT+0x94>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d111      	bne.n	800276a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d010      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002768:	e007      	b.n	800277a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400

08002790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0202 	mvn.w	r2, #2
 80027bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f9b1 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f9a4 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f9b3 	bl	8002b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d122      	bne.n	8002840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b04      	cmp	r3, #4
 8002806:	d11b      	bne.n	8002840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0204 	mvn.w	r2, #4
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f987 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f97a 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f989 	bl	8002b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b08      	cmp	r3, #8
 800284c:	d122      	bne.n	8002894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d11b      	bne.n	8002894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0208 	mvn.w	r2, #8
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f95d 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f950 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f95f 	bl	8002b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0210 	mvn.w	r2, #16
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2208      	movs	r2, #8
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f933 	bl	8002b3a <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f926 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f935 	bl	8002b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0201 	mvn.w	r2, #1
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fe84 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292c:	2b80      	cmp	r3, #128	; 0x80
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa67 	bl	8002e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8f9 	bl	8002b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b20      	cmp	r3, #32
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b20      	cmp	r3, #32
 8002986:	d107      	bne.n	8002998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0220 	mvn.w	r2, #32
 8002990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa32 	bl	8002dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_ConfigClockSource+0x18>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e0b3      	b.n	8002b20 <HAL_TIM_ConfigClockSource+0x180>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f0:	d03e      	beq.n	8002a70 <HAL_TIM_ConfigClockSource+0xd0>
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f6:	f200 8087 	bhi.w	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fe:	f000 8085 	beq.w	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a06:	d87f      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 8002a08:	2b70      	cmp	r3, #112	; 0x70
 8002a0a:	d01a      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0xa2>
 8002a0c:	2b70      	cmp	r3, #112	; 0x70
 8002a0e:	d87b      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 8002a10:	2b60      	cmp	r3, #96	; 0x60
 8002a12:	d050      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x116>
 8002a14:	2b60      	cmp	r3, #96	; 0x60
 8002a16:	d877      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 8002a18:	2b50      	cmp	r3, #80	; 0x50
 8002a1a:	d03c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xf6>
 8002a1c:	2b50      	cmp	r3, #80	; 0x50
 8002a1e:	d873      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d058      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x136>
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d86f      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 8002a28:	2b30      	cmp	r3, #48	; 0x30
 8002a2a:	d064      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x156>
 8002a2c:	2b30      	cmp	r3, #48	; 0x30
 8002a2e:	d86b      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d060      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x156>
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d867      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d05c      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x156>
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d05a      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a40:	e062      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f000 f95c 	bl	8002d0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
      break;
 8002a6e:	e04e      	b.n	8002b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f000 f945 	bl	8002d0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a92:	609a      	str	r2, [r3, #8]
      break;
 8002a94:	e03b      	b.n	8002b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f000 f8bc 	bl	8002c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2150      	movs	r1, #80	; 0x50
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f913 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002ab4:	e02b      	b.n	8002b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f000 f8da 	bl	8002c7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2160      	movs	r1, #96	; 0x60
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f903 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e01b      	b.n	8002b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 f89c 	bl	8002c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2140      	movs	r1, #64	; 0x40
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f8f3 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002af4:	e00b      	b.n	8002b0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f000 f8ea 	bl	8002cda <TIM_ITRx_SetConfig>
        break;
 8002b06:	e002      	b.n	8002b0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <TIM_Base_SetConfig+0xa8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_Base_SetConfig+0x28>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0x28>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <TIM_Base_SetConfig+0xac>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d108      	bne.n	8002baa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <TIM_Base_SetConfig+0xa8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <TIM_Base_SetConfig+0x52>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d003      	beq.n	8002bc2 <TIM_Base_SetConfig+0x52>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <TIM_Base_SetConfig+0xac>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d108      	bne.n	8002bd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <TIM_Base_SetConfig+0xa8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d103      	bne.n	8002c08 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	615a      	str	r2, [r3, #20]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40000400 	.word	0x40000400

08002c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f023 0201 	bic.w	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f023 030a 	bic.w	r3, r3, #10
 8002c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f023 0210 	bic.w	r2, r3, #16
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	031b      	lsls	r3, r3, #12
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	621a      	str	r2, [r3, #32]
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f043 0307 	orr.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b087      	sub	sp, #28
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	021a      	lsls	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e041      	b.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d004      	beq.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d10c      	bne.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400

08002dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2600      	movs	r6, #0
 8002e24:	4d0c      	ldr	r5, [pc, #48]	; (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	; (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1b64      	subs	r4, r4, r5
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 f822 	bl	8002e78 <_init>
 8002e34:	2600      	movs	r6, #0
 8002e36:	4d0a      	ldr	r5, [pc, #40]	; (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	; (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e48:	4798      	blx	r3
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e52:	4798      	blx	r3
 8002e54:	3601      	adds	r6, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	08002eb0 	.word	0x08002eb0
 8002e5c:	08002eb0 	.word	0x08002eb0
 8002e60:	08002eb0 	.word	0x08002eb0
 8002e64:	08002eb4 	.word	0x08002eb4

08002e68 <memset>:
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4402      	add	r2, r0
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <memset+0xa>
 8002e70:	4770      	bx	lr
 8002e72:	f803 1b01 	strb.w	r1, [r3], #1
 8002e76:	e7f9      	b.n	8002e6c <memset+0x4>

08002e78 <_init>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr

08002e84 <_fini>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr
